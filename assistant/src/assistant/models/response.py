# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from assistant.models.model_ids_responses import ModelIdsResponses
from assistant.models.output_item import OutputItem
from assistant.models.reasoning import Reasoning
from assistant.models.response_all_of_incomplete_details import ResponseAllOfIncompleteDetails
from assistant.models.response_error import ResponseError
from assistant.models.response_properties_text import ResponsePropertiesText
from assistant.models.response_properties_tool_choice import ResponsePropertiesToolChoice
from assistant.models.response_usage import ResponseUsage
from assistant.models.tool import Tool
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Response(BaseModel):
    """
    Response
    """ # noqa: E501
    metadata: Optional[Dict[str, StrictStr]] = Field(description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. ")
    temperature: Optional[Union[Annotated[float, Field(le=2, strict=True, ge=0)], Annotated[int, Field(le=2, strict=True, ge=0)]]] = Field(description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both. ")
    top_p: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. ")
    user: Optional[StrictStr] = Field(default=None, description="A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). ")
    previous_response_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about  [conversation state](/docs/guides/conversation-state). ")
    model: ModelIdsResponses
    reasoning: Optional[Reasoning] = None
    max_output_tokens: Optional[StrictInt] = Field(default=None, description="An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). ")
    instructions: Optional[StrictStr] = Field(description="Inserts a system (or developer) message as the first item in the model's context.  When using along with `previous_response_id`, the instructions from a previous response will be not be carried over to the next response. This makes it simple to swap out system (or developer) messages in new responses. ")
    text: Optional[ResponsePropertiesText] = None
    tools: List[Tool] = Field(description="An array of tools the model may call while generating a response. You  can specify which tool to use by setting the `tool_choice` parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model's capabilities, like [web search](/docs/guides/tools-web-search)   or [file search](/docs/guides/tools-file-search). Learn more about   [built-in tools](/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code. Learn more about   [function calling](/docs/guides/function-calling). ")
    tool_choice: ResponsePropertiesToolChoice
    truncation: Optional[StrictStr] = Field(default='disabled', description="The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the    response to fit the context window by dropping input items in the   middle of the conversation.  - `disabled` (default): If a model response will exceed the context window    size for a model, the request will fail with a 400 error. ")
    id: StrictStr = Field(description="Unique identifier for this Response. ")
    object: StrictStr = Field(description="The object type of this resource - always set to `response`. ")
    status: Optional[StrictStr] = Field(default=None, description="The status of the response generation. One of `completed`, `failed`,  `in_progress`, or `incomplete`. ")
    created_at: Union[StrictFloat, StrictInt] = Field(description="Unix timestamp (in seconds) of when this Response was created. ")
    error: Optional[ResponseError]
    incomplete_details: Optional[ResponseAllOfIncompleteDetails]
    output: List[OutputItem] = Field(description="An array of content items generated by the model.  - The length and order of items in the `output` array is dependent   on the model's response. - Rather than accessing the first item in the `output` array and    assuming it's an `assistant` message with the content generated by   the model, you might consider using the `output_text` property where   supported in SDKs. ")
    output_text: Optional[StrictStr] = Field(default=None, description="SDK-only convenience property that contains the aggregated text output  from all `output_text` items in the `output` array, if any are present.  Supported in the Python and JavaScript SDKs. ")
    usage: Optional[ResponseUsage] = None
    parallel_tool_calls: StrictBool = Field(description="Whether to allow the model to run tool calls in parallel. ")
    __properties: ClassVar[List[str]] = ["metadata", "temperature", "top_p", "user", "previous_response_id", "model", "reasoning", "max_output_tokens", "instructions", "text", "tools", "tool_choice", "truncation", "id", "object", "status", "created_at", "error", "incomplete_details", "output", "output_text", "usage", "parallel_tool_calls"]

    @field_validator('truncation')
    def truncation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('auto', 'disabled',):
            raise ValueError("must be one of enum values ('auto', 'disabled')")
        return value

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('response',):
            raise ValueError("must be one of enum values ('response')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('completed', 'failed', 'in_progress', 'incomplete',):
            raise ValueError("must be one of enum values ('completed', 'failed', 'in_progress', 'incomplete')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reasoning
        if self.reasoning:
            _dict['reasoning'] = self.reasoning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tools'] = _items
        # override the default output from pydantic by calling `to_dict()` of tool_choice
        if self.tool_choice:
            _dict['tool_choice'] = self.tool_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incomplete_details
        if self.incomplete_details:
            _dict['incomplete_details'] = self.incomplete_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output (list)
        _items = []
        if self.output:
            for _item in self.output:
                if _item:
                    _items.append(_item.to_dict())
            _dict['output'] = _items
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if top_p (nullable) is None
        # and model_fields_set contains the field
        if self.top_p is None and "top_p" in self.model_fields_set:
            _dict['top_p'] = None

        # set to None if previous_response_id (nullable) is None
        # and model_fields_set contains the field
        if self.previous_response_id is None and "previous_response_id" in self.model_fields_set:
            _dict['previous_response_id'] = None

        # set to None if max_output_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_output_tokens is None and "max_output_tokens" in self.model_fields_set:
            _dict['max_output_tokens'] = None

        # set to None if instructions (nullable) is None
        # and model_fields_set contains the field
        if self.instructions is None and "instructions" in self.model_fields_set:
            _dict['instructions'] = None

        # set to None if truncation (nullable) is None
        # and model_fields_set contains the field
        if self.truncation is None and "truncation" in self.model_fields_set:
            _dict['truncation'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if incomplete_details (nullable) is None
        # and model_fields_set contains the field
        if self.incomplete_details is None and "incomplete_details" in self.model_fields_set:
            _dict['incomplete_details'] = None

        # set to None if output_text (nullable) is None
        # and model_fields_set contains the field
        if self.output_text is None and "output_text" in self.model_fields_set:
            _dict['output_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": obj.get("metadata"),
            "temperature": obj.get("temperature") if obj.get("temperature") is not None else 1,
            "top_p": obj.get("top_p") if obj.get("top_p") is not None else 1,
            "user": obj.get("user"),
            "previous_response_id": obj.get("previous_response_id"),
            "model": ModelIdsResponses.from_dict(obj.get("model")) if obj.get("model") is not None else None,
            "reasoning": Reasoning.from_dict(obj.get("reasoning")) if obj.get("reasoning") is not None else None,
            "max_output_tokens": obj.get("max_output_tokens"),
            "instructions": obj.get("instructions"),
            "text": ResponsePropertiesText.from_dict(obj.get("text")) if obj.get("text") is not None else None,
            "tools": [Tool.from_dict(_item) for _item in obj.get("tools")] if obj.get("tools") is not None else None,
            "tool_choice": ResponsePropertiesToolChoice.from_dict(obj.get("tool_choice")) if obj.get("tool_choice") is not None else None,
            "truncation": obj.get("truncation") if obj.get("truncation") is not None else 'disabled',
            "id": obj.get("id"),
            "object": obj.get("object"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "error": ResponseError.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "incomplete_details": ResponseAllOfIncompleteDetails.from_dict(obj.get("incomplete_details")) if obj.get("incomplete_details") is not None else None,
            "output": [OutputItem.from_dict(_item) for _item in obj.get("output")] if obj.get("output") is not None else None,
            "output_text": obj.get("output_text"),
            "usage": ResponseUsage.from_dict(obj.get("usage")) if obj.get("usage") is not None else None,
            "parallel_tool_calls": obj.get("parallel_tool_calls") if obj.get("parallel_tool_calls") is not None else True
        })
        return _obj


