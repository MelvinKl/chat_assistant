# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.fine_tune_dpo_method import FineTuneDPOMethod
from assistant.models.fine_tune_supervised_method import FineTuneSupervisedMethod
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FineTuneMethod(BaseModel):
    """
    The method used for fine-tuning.
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="The type of method. Is either `supervised` or `dpo`.")
    supervised: Optional[FineTuneSupervisedMethod] = None
    dpo: Optional[FineTuneDPOMethod] = None
    __properties: ClassVar[List[str]] = ["type", "supervised", "dpo"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('supervised', 'dpo',):
            raise ValueError("must be one of enum values ('supervised', 'dpo')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FineTuneMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supervised
        if self.supervised:
            _dict['supervised'] = self.supervised.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dpo
        if self.dpo:
            _dict['dpo'] = self.dpo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FineTuneMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "supervised": FineTuneSupervisedMethod.from_dict(obj.get("supervised")) if obj.get("supervised") is not None else None,
            "dpo": FineTuneDPOMethod.from_dict(obj.get("dpo")) if obj.get("dpo") is not None else None
        })
        return _obj


