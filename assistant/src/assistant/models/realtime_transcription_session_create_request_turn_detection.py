# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RealtimeTranscriptionSessionCreateRequestTurnDetection(BaseModel):
    """
    Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech. Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency. 
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default='server_vad', description="Type of turn detection. ")
    eagerness: Optional[StrictStr] = Field(default='auto', description="Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`. ")
    threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments. ")
    prefix_padding_ms: Optional[StrictInt] = Field(default=None, description="Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms. ")
    silence_duration_ms: Optional[StrictInt] = Field(default=None, description="Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user. ")
    create_response: Optional[StrictBool] = Field(default=True, description="Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions. ")
    interrupt_response: Optional[StrictBool] = Field(default=True, description="Whether or not to automatically interrupt any ongoing response with output to the default conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions. ")
    __properties: ClassVar[List[str]] = ["type", "eagerness", "threshold", "prefix_padding_ms", "silence_duration_ms", "create_response", "interrupt_response"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('server_vad', 'semantic_vad',):
            raise ValueError("must be one of enum values ('server_vad', 'semantic_vad')")
        return value

    @field_validator('eagerness')
    def eagerness_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('low', 'medium', 'high', 'auto',):
            raise ValueError("must be one of enum values ('low', 'medium', 'high', 'auto')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RealtimeTranscriptionSessionCreateRequestTurnDetection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RealtimeTranscriptionSessionCreateRequestTurnDetection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type") if obj.get("type") is not None else 'server_vad',
            "eagerness": obj.get("eagerness") if obj.get("eagerness") is not None else 'auto',
            "threshold": obj.get("threshold"),
            "prefix_padding_ms": obj.get("prefix_padding_ms"),
            "silence_duration_ms": obj.get("silence_duration_ms"),
            "create_response": obj.get("create_response") if obj.get("create_response") is not None else True,
            "interrupt_response": obj.get("interrupt_response") if obj.get("interrupt_response") is not None else True
        })
        return _obj


