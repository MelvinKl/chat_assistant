# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401



from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from assistant.models.realtime_client_event_conversation_item_create import RealtimeClientEventConversationItemCreate
from assistant.models.realtime_client_event_conversation_item_delete import RealtimeClientEventConversationItemDelete
from assistant.models.realtime_client_event_conversation_item_retrieve import RealtimeClientEventConversationItemRetrieve
from assistant.models.realtime_client_event_conversation_item_truncate import RealtimeClientEventConversationItemTruncate
from assistant.models.realtime_client_event_input_audio_buffer_append import RealtimeClientEventInputAudioBufferAppend
from assistant.models.realtime_client_event_input_audio_buffer_clear import RealtimeClientEventInputAudioBufferClear
from assistant.models.realtime_client_event_input_audio_buffer_commit import RealtimeClientEventInputAudioBufferCommit
from assistant.models.realtime_client_event_response_cancel import RealtimeClientEventResponseCancel
from assistant.models.realtime_client_event_response_create import RealtimeClientEventResponseCreate
from assistant.models.realtime_client_event_session_update import RealtimeClientEventSessionUpdate
from assistant.models.realtime_client_event_transcription_session_update import RealtimeClientEventTranscriptionSessionUpdate
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

REALTIMECLIENTEVENT_ANY_OF_SCHEMAS = ["RealtimeClientEventConversationItemCreate", "RealtimeClientEventConversationItemDelete", "RealtimeClientEventConversationItemRetrieve", "RealtimeClientEventConversationItemTruncate", "RealtimeClientEventInputAudioBufferAppend", "RealtimeClientEventInputAudioBufferClear", "RealtimeClientEventInputAudioBufferCommit", "RealtimeClientEventResponseCancel", "RealtimeClientEventResponseCreate", "RealtimeClientEventSessionUpdate", "RealtimeClientEventTranscriptionSessionUpdate"]

class RealtimeClientEvent(BaseModel):
    """
    A realtime client event. 
    """

    # data type: RealtimeClientEventConversationItemCreate
    anyof_schema_1_validator: Optional[RealtimeClientEventConversationItemCreate] = None
    # data type: RealtimeClientEventConversationItemDelete
    anyof_schema_2_validator: Optional[RealtimeClientEventConversationItemDelete] = None
    # data type: RealtimeClientEventConversationItemRetrieve
    anyof_schema_3_validator: Optional[RealtimeClientEventConversationItemRetrieve] = None
    # data type: RealtimeClientEventConversationItemTruncate
    anyof_schema_4_validator: Optional[RealtimeClientEventConversationItemTruncate] = None
    # data type: RealtimeClientEventInputAudioBufferAppend
    anyof_schema_5_validator: Optional[RealtimeClientEventInputAudioBufferAppend] = None
    # data type: RealtimeClientEventInputAudioBufferClear
    anyof_schema_6_validator: Optional[RealtimeClientEventInputAudioBufferClear] = None
    # data type: RealtimeClientEventInputAudioBufferCommit
    anyof_schema_7_validator: Optional[RealtimeClientEventInputAudioBufferCommit] = None
    # data type: RealtimeClientEventResponseCancel
    anyof_schema_8_validator: Optional[RealtimeClientEventResponseCancel] = None
    # data type: RealtimeClientEventResponseCreate
    anyof_schema_9_validator: Optional[RealtimeClientEventResponseCreate] = None
    # data type: RealtimeClientEventSessionUpdate
    anyof_schema_10_validator: Optional[RealtimeClientEventSessionUpdate] = None
    # data type: RealtimeClientEventTranscriptionSessionUpdate
    anyof_schema_11_validator: Optional[RealtimeClientEventTranscriptionSessionUpdate] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[RealtimeClientEventConversationItemCreate, RealtimeClientEventConversationItemDelete, RealtimeClientEventConversationItemRetrieve, RealtimeClientEventConversationItemTruncate, RealtimeClientEventInputAudioBufferAppend, RealtimeClientEventInputAudioBufferClear, RealtimeClientEventInputAudioBufferCommit, RealtimeClientEventResponseCancel, RealtimeClientEventResponseCreate, RealtimeClientEventSessionUpdate, RealtimeClientEventTranscriptionSessionUpdate]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[REALTIMECLIENTEVENT_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = RealtimeClientEvent.model_construct()
        error_messages = []
        # validate data type: RealtimeClientEventConversationItemCreate
        if not isinstance(v, RealtimeClientEventConversationItemCreate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventConversationItemCreate`")
        else:
            return v

        # validate data type: RealtimeClientEventConversationItemDelete
        if not isinstance(v, RealtimeClientEventConversationItemDelete):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventConversationItemDelete`")
        else:
            return v

        # validate data type: RealtimeClientEventConversationItemRetrieve
        if not isinstance(v, RealtimeClientEventConversationItemRetrieve):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventConversationItemRetrieve`")
        else:
            return v

        # validate data type: RealtimeClientEventConversationItemTruncate
        if not isinstance(v, RealtimeClientEventConversationItemTruncate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventConversationItemTruncate`")
        else:
            return v

        # validate data type: RealtimeClientEventInputAudioBufferAppend
        if not isinstance(v, RealtimeClientEventInputAudioBufferAppend):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventInputAudioBufferAppend`")
        else:
            return v

        # validate data type: RealtimeClientEventInputAudioBufferClear
        if not isinstance(v, RealtimeClientEventInputAudioBufferClear):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventInputAudioBufferClear`")
        else:
            return v

        # validate data type: RealtimeClientEventInputAudioBufferCommit
        if not isinstance(v, RealtimeClientEventInputAudioBufferCommit):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventInputAudioBufferCommit`")
        else:
            return v

        # validate data type: RealtimeClientEventResponseCancel
        if not isinstance(v, RealtimeClientEventResponseCancel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventResponseCancel`")
        else:
            return v

        # validate data type: RealtimeClientEventResponseCreate
        if not isinstance(v, RealtimeClientEventResponseCreate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventResponseCreate`")
        else:
            return v

        # validate data type: RealtimeClientEventSessionUpdate
        if not isinstance(v, RealtimeClientEventSessionUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventSessionUpdate`")
        else:
            return v

        # validate data type: RealtimeClientEventTranscriptionSessionUpdate
        if not isinstance(v, RealtimeClientEventTranscriptionSessionUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeClientEventTranscriptionSessionUpdate`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in RealtimeClientEvent with anyOf schemas: RealtimeClientEventConversationItemCreate, RealtimeClientEventConversationItemDelete, RealtimeClientEventConversationItemRetrieve, RealtimeClientEventConversationItemTruncate, RealtimeClientEventInputAudioBufferAppend, RealtimeClientEventInputAudioBufferClear, RealtimeClientEventInputAudioBufferCommit, RealtimeClientEventResponseCancel, RealtimeClientEventResponseCreate, RealtimeClientEventSessionUpdate, RealtimeClientEventTranscriptionSessionUpdate. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[RealtimeClientEventConversationItemCreate] = None
        try:
            instance.actual_instance = RealtimeClientEventConversationItemCreate.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[RealtimeClientEventConversationItemDelete] = None
        try:
            instance.actual_instance = RealtimeClientEventConversationItemDelete.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[RealtimeClientEventConversationItemRetrieve] = None
        try:
            instance.actual_instance = RealtimeClientEventConversationItemRetrieve.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[RealtimeClientEventConversationItemTruncate] = None
        try:
            instance.actual_instance = RealtimeClientEventConversationItemTruncate.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[RealtimeClientEventInputAudioBufferAppend] = None
        try:
            instance.actual_instance = RealtimeClientEventInputAudioBufferAppend.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[RealtimeClientEventInputAudioBufferClear] = None
        try:
            instance.actual_instance = RealtimeClientEventInputAudioBufferClear.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[RealtimeClientEventInputAudioBufferCommit] = None
        try:
            instance.actual_instance = RealtimeClientEventInputAudioBufferCommit.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[RealtimeClientEventResponseCancel] = None
        try:
            instance.actual_instance = RealtimeClientEventResponseCancel.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[RealtimeClientEventResponseCreate] = None
        try:
            instance.actual_instance = RealtimeClientEventResponseCreate.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[RealtimeClientEventSessionUpdate] = None
        try:
            instance.actual_instance = RealtimeClientEventSessionUpdate.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[RealtimeClientEventTranscriptionSessionUpdate] = None
        try:
            instance.actual_instance = RealtimeClientEventTranscriptionSessionUpdate.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RealtimeClientEvent with anyOf schemas: RealtimeClientEventConversationItemCreate, RealtimeClientEventConversationItemDelete, RealtimeClientEventConversationItemRetrieve, RealtimeClientEventConversationItemTruncate, RealtimeClientEventInputAudioBufferAppend, RealtimeClientEventInputAudioBufferClear, RealtimeClientEventInputAudioBufferCommit, RealtimeClientEventResponseCancel, RealtimeClientEventResponseCreate, RealtimeClientEventSessionUpdate, RealtimeClientEventTranscriptionSessionUpdate. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


