# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.log_prob_properties import LogProbProperties

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RealtimeServerEventConversationItemInputAudioTranscriptionCompleted(BaseModel):
    """
    This event is the output of audio transcription for user audio written to the  user audio buffer. Transcription begins when the input audio buffer is  committed by the client or server (in `server_vad` mode). Transcription runs  asynchronously with Response creation, so this event may come before or after  the Response events.  Realtime API models accept audio natively, and thus input transcription is a  separate process run on a separate ASR (Automatic Speech Recognition) model,  currently always `whisper-1`. Thus the transcript may diverge somewhat from  the model's interpretation, and should be treated as a rough guide.
    """  # noqa: E501

    event_id: StrictStr = Field(description="The unique ID of the server event.")
    type: StrictStr = Field(
        description="The event type, must be `conversation.item.input_audio_transcription.completed`. "
    )
    item_id: StrictStr = Field(description="The ID of the user message item containing the audio.")
    content_index: StrictInt = Field(description="The index of the content part containing the audio.")
    transcript: StrictStr = Field(description="The transcribed text.")
    logprobs: Optional[List[LogProbProperties]] = Field(
        default=None, description="The log probabilities of the transcription."
    )
    __properties: ClassVar[List[str]] = ["event_id", "type", "item_id", "content_index", "transcript", "logprobs"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("conversation.item.input_audio_transcription.completed",):
            raise ValueError("must be one of enum values ('conversation.item.input_audio_transcription.completed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RealtimeServerEventConversationItemInputAudioTranscriptionCompleted from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logprobs (list)
        _items = []
        if self.logprobs:
            for _item in self.logprobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["logprobs"] = _items
        # set to None if logprobs (nullable) is None
        # and model_fields_set contains the field
        if self.logprobs is None and "logprobs" in self.model_fields_set:
            _dict["logprobs"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RealtimeServerEventConversationItemInputAudioTranscriptionCompleted from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "event_id": obj.get("event_id"),
                "type": obj.get("type"),
                "item_id": obj.get("item_id"),
                "content_index": obj.get("content_index"),
                "transcript": obj.get("transcript"),
                "logprobs": (
                    [LogProbProperties.from_dict(_item) for _item in obj.get("logprobs")]
                    if obj.get("logprobs") is not None
                    else None
                ),
            }
        )
        return _obj
