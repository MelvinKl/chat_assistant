# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.reasoning_effort import ReasoningEffort

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Reasoning(BaseModel):
    """
    **o-series models only**  Configuration options for  [reasoning models](https://platform.openai.com/docs/guides/reasoning).
    """  # noqa: E501

    effort: Optional[ReasoningEffort] = ReasoningEffort.MEDIUM
    generate_summary: Optional[StrictStr] = Field(
        default=None,
        description="**computer_use_preview only**  A summary of the reasoning performed by the model. This can be useful for debugging and understanding the model's reasoning process. One of `concise` or `detailed`. ",
    )
    __properties: ClassVar[List[str]] = ["effort", "generate_summary"]

    @field_validator("generate_summary")
    def generate_summary_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "concise",
            "detailed",
        ):
            raise ValueError("must be one of enum values ('concise', 'detailed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Reasoning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # set to None if effort (nullable) is None
        # and model_fields_set contains the field
        if self.effort is None and "effort" in self.model_fields_set:
            _dict["effort"] = None

        # set to None if generate_summary (nullable) is None
        # and model_fields_set contains the field
        if self.generate_summary is None and "generate_summary" in self.model_fields_set:
            _dict["generate_summary"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Reasoning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "effort": obj.get("effort") if obj.get("effort") is not None else ReasoningEffort.MEDIUM,
                "generate_summary": obj.get("generate_summary"),
            }
        )
        return _obj
