# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Literal

from assistant.models.transcript_text_delta_event import TranscriptTextDeltaEvent
from assistant.models.transcript_text_done_event import TranscriptTextDoneEvent

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

CREATETRANSCRIPTIONRESPONSESTREAMEVENT_ANY_OF_SCHEMAS = ["TranscriptTextDeltaEvent", "TranscriptTextDoneEvent"]


class CreateTranscriptionResponseStreamEvent(BaseModel):
    """
    CreateTranscriptionResponseStreamEvent
    """

    # data type: TranscriptTextDeltaEvent
    anyof_schema_1_validator: Optional[TranscriptTextDeltaEvent] = None
    # data type: TranscriptTextDoneEvent
    anyof_schema_2_validator: Optional[TranscriptTextDoneEvent] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[TranscriptTextDeltaEvent, TranscriptTextDoneEvent]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[CREATETRANSCRIPTIONRESPONSESTREAMEVENT_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = CreateTranscriptionResponseStreamEvent.model_construct()
        error_messages = []
        # validate data type: TranscriptTextDeltaEvent
        if not isinstance(v, TranscriptTextDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TranscriptTextDeltaEvent`")
        else:
            return v

        # validate data type: TranscriptTextDoneEvent
        if not isinstance(v, TranscriptTextDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TranscriptTextDoneEvent`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in CreateTranscriptionResponseStreamEvent with anyOf schemas: TranscriptTextDeltaEvent, TranscriptTextDoneEvent. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[TranscriptTextDeltaEvent] = None
        try:
            instance.actual_instance = TranscriptTextDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[TranscriptTextDoneEvent] = None
        try:
            instance.actual_instance = TranscriptTextDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into CreateTranscriptionResponseStreamEvent with anyOf schemas: TranscriptTextDeltaEvent, TranscriptTextDoneEvent. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
