# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)

from assistant.models.realtime_conversation_item import RealtimeConversationItem
from assistant.models.realtime_response_max_output_tokens import (
    RealtimeResponseMaxOutputTokens,
)
from assistant.models.realtime_response_status_details import (
    RealtimeResponseStatusDetails,
)
from assistant.models.realtime_response_usage import RealtimeResponseUsage
from assistant.models.voice_ids_shared import VoiceIdsShared

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RealtimeResponse(BaseModel):
    """
    The response resource.
    """  # noqa: E501

    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the response.")
    object: Optional[StrictStr] = Field(default=None, description="The object type, must be `realtime.response`.")
    status: Optional[StrictStr] = Field(
        default=None,
        description="The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). ",
    )
    status_details: Optional[RealtimeResponseStatusDetails] = None
    output: Optional[List[RealtimeConversationItem]] = Field(
        default=None, description="The list of output items generated by the response."
    )
    metadata: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. ",
    )
    usage: Optional[RealtimeResponseUsage] = None
    conversation_id: Optional[StrictStr] = Field(
        default=None,
        description="Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`. ",
    )
    voice: Optional[VoiceIdsShared] = None
    modalities: Optional[List[StrictStr]] = Field(
        default=None,
        description='The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `["text", "audio"]`, the model could be responding in either text or audio. ',
    )
    output_audio_format: Optional[StrictStr] = Field(
        default=None, description="The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. "
    )
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. "
    )
    max_output_tokens: Optional[RealtimeResponseMaxOutputTokens] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "object",
        "status",
        "status_details",
        "output",
        "metadata",
        "usage",
        "conversation_id",
        "voice",
        "modalities",
        "output_audio_format",
        "temperature",
        "max_output_tokens",
    ]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("realtime.response",):
            raise ValueError("must be one of enum values ('realtime.response')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "completed",
            "cancelled",
            "failed",
            "incomplete",
        ):
            raise ValueError("must be one of enum values ('completed', 'cancelled', 'failed', 'incomplete')")
        return value

    @field_validator("modalities")
    def modalities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (
                "text",
                "audio",
            ):
                raise ValueError("each list item must be one of ('text', 'audio')")
        return value

    @field_validator("output_audio_format")
    def output_audio_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "pcm16",
            "g711_ulaw",
            "g711_alaw",
        ):
            raise ValueError("must be one of enum values ('pcm16', 'g711_ulaw', 'g711_alaw')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RealtimeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict["status_details"] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output (list)
        _items = []
        if self.output:
            for _item in self.output:
                if _item:
                    _items.append(_item.to_dict())
            _dict["output"] = _items
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict["usage"] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice
        if self.voice:
            _dict["voice"] = self.voice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_output_tokens
        if self.max_output_tokens:
            _dict["max_output_tokens"] = self.max_output_tokens.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict["metadata"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RealtimeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "object": obj.get("object"),
                "status": obj.get("status"),
                "status_details": (
                    RealtimeResponseStatusDetails.from_dict(obj.get("status_details"))
                    if obj.get("status_details") is not None
                    else None
                ),
                "output": (
                    [RealtimeConversationItem.from_dict(_item) for _item in obj.get("output")]
                    if obj.get("output") is not None
                    else None
                ),
                "metadata": obj.get("metadata"),
                "usage": RealtimeResponseUsage.from_dict(obj.get("usage")) if obj.get("usage") is not None else None,
                "conversation_id": obj.get("conversation_id"),
                "voice": VoiceIdsShared.from_dict(obj.get("voice")) if obj.get("voice") is not None else None,
                "modalities": obj.get("modalities"),
                "output_audio_format": obj.get("output_audio_format"),
                "temperature": obj.get("temperature"),
                "max_output_tokens": (
                    RealtimeResponseMaxOutputTokens.from_dict(obj.get("max_output_tokens"))
                    if obj.get("max_output_tokens") is not None
                    else None
                ),
            }
        )
        return _obj
