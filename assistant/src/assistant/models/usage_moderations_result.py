# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class UsageModerationsResult(BaseModel):
    """
    The aggregated moderations usage details of the specific time bucket.
    """  # noqa: E501

    object: StrictStr
    input_tokens: StrictInt = Field(description="The aggregated number of input tokens used.")
    num_model_requests: StrictInt = Field(description="The count of requests made to the model.")
    project_id: Optional[StrictStr] = Field(
        default=None,
        description="When `group_by=project_id`, this field provides the project ID of the grouped usage result.",
    )
    user_id: Optional[StrictStr] = Field(
        default=None,
        description="When `group_by=user_id`, this field provides the user ID of the grouped usage result.",
    )
    api_key_id: Optional[StrictStr] = Field(
        default=None,
        description="When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.",
    )
    model: Optional[StrictStr] = Field(
        default=None,
        description="When `group_by=model`, this field provides the model name of the grouped usage result.",
    )
    __properties: ClassVar[List[str]] = [
        "object",
        "input_tokens",
        "num_model_requests",
        "project_id",
        "user_id",
        "api_key_id",
        "model",
    ]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("organization.usage.moderations.result",):
            raise ValueError("must be one of enum values ('organization.usage.moderations.result')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UsageModerationsResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict["project_id"] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict["user_id"] = None

        # set to None if api_key_id (nullable) is None
        # and model_fields_set contains the field
        if self.api_key_id is None and "api_key_id" in self.model_fields_set:
            _dict["api_key_id"] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict["model"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UsageModerationsResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "input_tokens": obj.get("input_tokens"),
                "num_model_requests": obj.get("num_model_requests"),
                "project_id": obj.get("project_id"),
                "user_id": obj.get("user_id"),
                "api_key_id": obj.get("api_key_id"),
                "model": obj.get("model"),
            }
        )
        return _obj
