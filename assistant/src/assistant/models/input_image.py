# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class InputImage(BaseModel):
    """
    An image input to the model. Learn about [image inputs](/docs/guides/vision).
    """  # noqa: E501

    type: StrictStr = Field(description="The type of the input item. Always `input_image`. ")
    image_url: Optional[StrictStr] = Field(
        default=None,
        description="The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL. ",
    )
    file_id: Optional[StrictStr] = Field(default=None, description="The ID of the file to be sent to the model. ")
    detail: StrictStr = Field(
        description="The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`. "
    )
    __properties: ClassVar[List[str]] = ["type", "image_url", "file_id", "detail"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("input_image",):
            raise ValueError("must be one of enum values ('input_image')")
        return value

    @field_validator("detail")
    def detail_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "high",
            "low",
            "auto",
        ):
            raise ValueError("must be one of enum values ('high', 'low', 'auto')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InputImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # set to None if image_url (nullable) is None
        # and model_fields_set contains the field
        if self.image_url is None and "image_url" in self.model_fields_set:
            _dict["image_url"] = None

        # set to None if file_id (nullable) is None
        # and model_fields_set contains the field
        if self.file_id is None and "file_id" in self.model_fields_set:
            _dict["file_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InputImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "image_url": obj.get("image_url"),
                "file_id": obj.get("file_id"),
                "detail": obj.get("detail") if obj.get("detail") is not None else "auto",
            }
        )
        return _obj
