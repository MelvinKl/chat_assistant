# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Literal

from assistant.models.response_audio_delta_event import ResponseAudioDeltaEvent
from assistant.models.response_audio_done_event import ResponseAudioDoneEvent
from assistant.models.response_audio_transcript_delta_event import (
    ResponseAudioTranscriptDeltaEvent,
)
from assistant.models.response_audio_transcript_done_event import (
    ResponseAudioTranscriptDoneEvent,
)
from assistant.models.response_code_interpreter_call_code_delta_event import (
    ResponseCodeInterpreterCallCodeDeltaEvent,
)
from assistant.models.response_code_interpreter_call_code_done_event import (
    ResponseCodeInterpreterCallCodeDoneEvent,
)
from assistant.models.response_code_interpreter_call_completed_event import (
    ResponseCodeInterpreterCallCompletedEvent,
)
from assistant.models.response_code_interpreter_call_in_progress_event import (
    ResponseCodeInterpreterCallInProgressEvent,
)
from assistant.models.response_code_interpreter_call_interpreting_event import (
    ResponseCodeInterpreterCallInterpretingEvent,
)
from assistant.models.response_completed_event import ResponseCompletedEvent
from assistant.models.response_content_part_added_event import (
    ResponseContentPartAddedEvent,
)
from assistant.models.response_content_part_done_event import (
    ResponseContentPartDoneEvent,
)
from assistant.models.response_created_event import ResponseCreatedEvent
from assistant.models.response_error_event import ResponseErrorEvent
from assistant.models.response_failed_event import ResponseFailedEvent
from assistant.models.response_file_search_call_completed_event import (
    ResponseFileSearchCallCompletedEvent,
)
from assistant.models.response_file_search_call_in_progress_event import (
    ResponseFileSearchCallInProgressEvent,
)
from assistant.models.response_file_search_call_searching_event import (
    ResponseFileSearchCallSearchingEvent,
)
from assistant.models.response_function_call_arguments_delta_event import (
    ResponseFunctionCallArgumentsDeltaEvent,
)
from assistant.models.response_function_call_arguments_done_event import (
    ResponseFunctionCallArgumentsDoneEvent,
)
from assistant.models.response_in_progress_event import ResponseInProgressEvent
from assistant.models.response_incomplete_event import ResponseIncompleteEvent
from assistant.models.response_output_item_added_event import (
    ResponseOutputItemAddedEvent,
)
from assistant.models.response_output_item_done_event import ResponseOutputItemDoneEvent
from assistant.models.response_refusal_delta_event import ResponseRefusalDeltaEvent
from assistant.models.response_refusal_done_event import ResponseRefusalDoneEvent
from assistant.models.response_text_annotation_delta_event import (
    ResponseTextAnnotationDeltaEvent,
)
from assistant.models.response_text_delta_event import ResponseTextDeltaEvent
from assistant.models.response_text_done_event import ResponseTextDoneEvent
from assistant.models.response_web_search_call_completed_event import (
    ResponseWebSearchCallCompletedEvent,
)
from assistant.models.response_web_search_call_in_progress_event import (
    ResponseWebSearchCallInProgressEvent,
)
from assistant.models.response_web_search_call_searching_event import (
    ResponseWebSearchCallSearchingEvent,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

RESPONSESTREAMEVENT_ANY_OF_SCHEMAS = [
    "ResponseAudioDeltaEvent",
    "ResponseAudioDoneEvent",
    "ResponseAudioTranscriptDeltaEvent",
    "ResponseAudioTranscriptDoneEvent",
    "ResponseCodeInterpreterCallCodeDeltaEvent",
    "ResponseCodeInterpreterCallCodeDoneEvent",
    "ResponseCodeInterpreterCallCompletedEvent",
    "ResponseCodeInterpreterCallInProgressEvent",
    "ResponseCodeInterpreterCallInterpretingEvent",
    "ResponseCompletedEvent",
    "ResponseContentPartAddedEvent",
    "ResponseContentPartDoneEvent",
    "ResponseCreatedEvent",
    "ResponseErrorEvent",
    "ResponseFailedEvent",
    "ResponseFileSearchCallCompletedEvent",
    "ResponseFileSearchCallInProgressEvent",
    "ResponseFileSearchCallSearchingEvent",
    "ResponseFunctionCallArgumentsDeltaEvent",
    "ResponseFunctionCallArgumentsDoneEvent",
    "ResponseInProgressEvent",
    "ResponseIncompleteEvent",
    "ResponseOutputItemAddedEvent",
    "ResponseOutputItemDoneEvent",
    "ResponseRefusalDeltaEvent",
    "ResponseRefusalDoneEvent",
    "ResponseTextAnnotationDeltaEvent",
    "ResponseTextDeltaEvent",
    "ResponseTextDoneEvent",
    "ResponseWebSearchCallCompletedEvent",
    "ResponseWebSearchCallInProgressEvent",
    "ResponseWebSearchCallSearchingEvent",
]


class ResponseStreamEvent(BaseModel):
    """
    ResponseStreamEvent
    """

    # data type: ResponseAudioDeltaEvent
    anyof_schema_1_validator: Optional[ResponseAudioDeltaEvent] = None
    # data type: ResponseAudioDoneEvent
    anyof_schema_2_validator: Optional[ResponseAudioDoneEvent] = None
    # data type: ResponseAudioTranscriptDeltaEvent
    anyof_schema_3_validator: Optional[ResponseAudioTranscriptDeltaEvent] = None
    # data type: ResponseAudioTranscriptDoneEvent
    anyof_schema_4_validator: Optional[ResponseAudioTranscriptDoneEvent] = None
    # data type: ResponseCodeInterpreterCallCodeDeltaEvent
    anyof_schema_5_validator: Optional[ResponseCodeInterpreterCallCodeDeltaEvent] = None
    # data type: ResponseCodeInterpreterCallCodeDoneEvent
    anyof_schema_6_validator: Optional[ResponseCodeInterpreterCallCodeDoneEvent] = None
    # data type: ResponseCodeInterpreterCallCompletedEvent
    anyof_schema_7_validator: Optional[ResponseCodeInterpreterCallCompletedEvent] = None
    # data type: ResponseCodeInterpreterCallInProgressEvent
    anyof_schema_8_validator: Optional[ResponseCodeInterpreterCallInProgressEvent] = None
    # data type: ResponseCodeInterpreterCallInterpretingEvent
    anyof_schema_9_validator: Optional[ResponseCodeInterpreterCallInterpretingEvent] = None
    # data type: ResponseCompletedEvent
    anyof_schema_10_validator: Optional[ResponseCompletedEvent] = None
    # data type: ResponseContentPartAddedEvent
    anyof_schema_11_validator: Optional[ResponseContentPartAddedEvent] = None
    # data type: ResponseContentPartDoneEvent
    anyof_schema_12_validator: Optional[ResponseContentPartDoneEvent] = None
    # data type: ResponseCreatedEvent
    anyof_schema_13_validator: Optional[ResponseCreatedEvent] = None
    # data type: ResponseErrorEvent
    anyof_schema_14_validator: Optional[ResponseErrorEvent] = None
    # data type: ResponseFileSearchCallCompletedEvent
    anyof_schema_15_validator: Optional[ResponseFileSearchCallCompletedEvent] = None
    # data type: ResponseFileSearchCallInProgressEvent
    anyof_schema_16_validator: Optional[ResponseFileSearchCallInProgressEvent] = None
    # data type: ResponseFileSearchCallSearchingEvent
    anyof_schema_17_validator: Optional[ResponseFileSearchCallSearchingEvent] = None
    # data type: ResponseFunctionCallArgumentsDeltaEvent
    anyof_schema_18_validator: Optional[ResponseFunctionCallArgumentsDeltaEvent] = None
    # data type: ResponseFunctionCallArgumentsDoneEvent
    anyof_schema_19_validator: Optional[ResponseFunctionCallArgumentsDoneEvent] = None
    # data type: ResponseInProgressEvent
    anyof_schema_20_validator: Optional[ResponseInProgressEvent] = None
    # data type: ResponseFailedEvent
    anyof_schema_21_validator: Optional[ResponseFailedEvent] = None
    # data type: ResponseIncompleteEvent
    anyof_schema_22_validator: Optional[ResponseIncompleteEvent] = None
    # data type: ResponseOutputItemAddedEvent
    anyof_schema_23_validator: Optional[ResponseOutputItemAddedEvent] = None
    # data type: ResponseOutputItemDoneEvent
    anyof_schema_24_validator: Optional[ResponseOutputItemDoneEvent] = None
    # data type: ResponseRefusalDeltaEvent
    anyof_schema_25_validator: Optional[ResponseRefusalDeltaEvent] = None
    # data type: ResponseRefusalDoneEvent
    anyof_schema_26_validator: Optional[ResponseRefusalDoneEvent] = None
    # data type: ResponseTextAnnotationDeltaEvent
    anyof_schema_27_validator: Optional[ResponseTextAnnotationDeltaEvent] = None
    # data type: ResponseTextDeltaEvent
    anyof_schema_28_validator: Optional[ResponseTextDeltaEvent] = None
    # data type: ResponseTextDoneEvent
    anyof_schema_29_validator: Optional[ResponseTextDoneEvent] = None
    # data type: ResponseWebSearchCallCompletedEvent
    anyof_schema_30_validator: Optional[ResponseWebSearchCallCompletedEvent] = None
    # data type: ResponseWebSearchCallInProgressEvent
    anyof_schema_31_validator: Optional[ResponseWebSearchCallInProgressEvent] = None
    # data type: ResponseWebSearchCallSearchingEvent
    anyof_schema_32_validator: Optional[ResponseWebSearchCallSearchingEvent] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                ResponseAudioDeltaEvent,
                ResponseAudioDoneEvent,
                ResponseAudioTranscriptDeltaEvent,
                ResponseAudioTranscriptDoneEvent,
                ResponseCodeInterpreterCallCodeDeltaEvent,
                ResponseCodeInterpreterCallCodeDoneEvent,
                ResponseCodeInterpreterCallCompletedEvent,
                ResponseCodeInterpreterCallInProgressEvent,
                ResponseCodeInterpreterCallInterpretingEvent,
                ResponseCompletedEvent,
                ResponseContentPartAddedEvent,
                ResponseContentPartDoneEvent,
                ResponseCreatedEvent,
                ResponseErrorEvent,
                ResponseFailedEvent,
                ResponseFileSearchCallCompletedEvent,
                ResponseFileSearchCallInProgressEvent,
                ResponseFileSearchCallSearchingEvent,
                ResponseFunctionCallArgumentsDeltaEvent,
                ResponseFunctionCallArgumentsDoneEvent,
                ResponseInProgressEvent,
                ResponseIncompleteEvent,
                ResponseOutputItemAddedEvent,
                ResponseOutputItemDoneEvent,
                ResponseRefusalDeltaEvent,
                ResponseRefusalDoneEvent,
                ResponseTextAnnotationDeltaEvent,
                ResponseTextDeltaEvent,
                ResponseTextDoneEvent,
                ResponseWebSearchCallCompletedEvent,
                ResponseWebSearchCallInProgressEvent,
                ResponseWebSearchCallSearchingEvent,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[RESPONSESTREAMEVENT_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = ResponseStreamEvent.model_construct()
        error_messages = []
        # validate data type: ResponseAudioDeltaEvent
        if not isinstance(v, ResponseAudioDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseAudioDeltaEvent`")
        else:
            return v

        # validate data type: ResponseAudioDoneEvent
        if not isinstance(v, ResponseAudioDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseAudioDoneEvent`")
        else:
            return v

        # validate data type: ResponseAudioTranscriptDeltaEvent
        if not isinstance(v, ResponseAudioTranscriptDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseAudioTranscriptDeltaEvent`")
        else:
            return v

        # validate data type: ResponseAudioTranscriptDoneEvent
        if not isinstance(v, ResponseAudioTranscriptDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseAudioTranscriptDoneEvent`")
        else:
            return v

        # validate data type: ResponseCodeInterpreterCallCodeDeltaEvent
        if not isinstance(v, ResponseCodeInterpreterCallCodeDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseCodeInterpreterCallCodeDeltaEvent`")
        else:
            return v

        # validate data type: ResponseCodeInterpreterCallCodeDoneEvent
        if not isinstance(v, ResponseCodeInterpreterCallCodeDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseCodeInterpreterCallCodeDoneEvent`")
        else:
            return v

        # validate data type: ResponseCodeInterpreterCallCompletedEvent
        if not isinstance(v, ResponseCodeInterpreterCallCompletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseCodeInterpreterCallCompletedEvent`")
        else:
            return v

        # validate data type: ResponseCodeInterpreterCallInProgressEvent
        if not isinstance(v, ResponseCodeInterpreterCallInProgressEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseCodeInterpreterCallInProgressEvent`")
        else:
            return v

        # validate data type: ResponseCodeInterpreterCallInterpretingEvent
        if not isinstance(v, ResponseCodeInterpreterCallInterpretingEvent):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ResponseCodeInterpreterCallInterpretingEvent`"
            )
        else:
            return v

        # validate data type: ResponseCompletedEvent
        if not isinstance(v, ResponseCompletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseCompletedEvent`")
        else:
            return v

        # validate data type: ResponseContentPartAddedEvent
        if not isinstance(v, ResponseContentPartAddedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseContentPartAddedEvent`")
        else:
            return v

        # validate data type: ResponseContentPartDoneEvent
        if not isinstance(v, ResponseContentPartDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseContentPartDoneEvent`")
        else:
            return v

        # validate data type: ResponseCreatedEvent
        if not isinstance(v, ResponseCreatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseCreatedEvent`")
        else:
            return v

        # validate data type: ResponseErrorEvent
        if not isinstance(v, ResponseErrorEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseErrorEvent`")
        else:
            return v

        # validate data type: ResponseFileSearchCallCompletedEvent
        if not isinstance(v, ResponseFileSearchCallCompletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFileSearchCallCompletedEvent`")
        else:
            return v

        # validate data type: ResponseFileSearchCallInProgressEvent
        if not isinstance(v, ResponseFileSearchCallInProgressEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFileSearchCallInProgressEvent`")
        else:
            return v

        # validate data type: ResponseFileSearchCallSearchingEvent
        if not isinstance(v, ResponseFileSearchCallSearchingEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFileSearchCallSearchingEvent`")
        else:
            return v

        # validate data type: ResponseFunctionCallArgumentsDeltaEvent
        if not isinstance(v, ResponseFunctionCallArgumentsDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFunctionCallArgumentsDeltaEvent`")
        else:
            return v

        # validate data type: ResponseFunctionCallArgumentsDoneEvent
        if not isinstance(v, ResponseFunctionCallArgumentsDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFunctionCallArgumentsDoneEvent`")
        else:
            return v

        # validate data type: ResponseInProgressEvent
        if not isinstance(v, ResponseInProgressEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseInProgressEvent`")
        else:
            return v

        # validate data type: ResponseFailedEvent
        if not isinstance(v, ResponseFailedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFailedEvent`")
        else:
            return v

        # validate data type: ResponseIncompleteEvent
        if not isinstance(v, ResponseIncompleteEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseIncompleteEvent`")
        else:
            return v

        # validate data type: ResponseOutputItemAddedEvent
        if not isinstance(v, ResponseOutputItemAddedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseOutputItemAddedEvent`")
        else:
            return v

        # validate data type: ResponseOutputItemDoneEvent
        if not isinstance(v, ResponseOutputItemDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseOutputItemDoneEvent`")
        else:
            return v

        # validate data type: ResponseRefusalDeltaEvent
        if not isinstance(v, ResponseRefusalDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseRefusalDeltaEvent`")
        else:
            return v

        # validate data type: ResponseRefusalDoneEvent
        if not isinstance(v, ResponseRefusalDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseRefusalDoneEvent`")
        else:
            return v

        # validate data type: ResponseTextAnnotationDeltaEvent
        if not isinstance(v, ResponseTextAnnotationDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseTextAnnotationDeltaEvent`")
        else:
            return v

        # validate data type: ResponseTextDeltaEvent
        if not isinstance(v, ResponseTextDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseTextDeltaEvent`")
        else:
            return v

        # validate data type: ResponseTextDoneEvent
        if not isinstance(v, ResponseTextDoneEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseTextDoneEvent`")
        else:
            return v

        # validate data type: ResponseWebSearchCallCompletedEvent
        if not isinstance(v, ResponseWebSearchCallCompletedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseWebSearchCallCompletedEvent`")
        else:
            return v

        # validate data type: ResponseWebSearchCallInProgressEvent
        if not isinstance(v, ResponseWebSearchCallInProgressEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseWebSearchCallInProgressEvent`")
        else:
            return v

        # validate data type: ResponseWebSearchCallSearchingEvent
        if not isinstance(v, ResponseWebSearchCallSearchingEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseWebSearchCallSearchingEvent`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in ResponseStreamEvent with anyOf schemas: ResponseAudioDeltaEvent, ResponseAudioDoneEvent, ResponseAudioTranscriptDeltaEvent, ResponseAudioTranscriptDoneEvent, ResponseCodeInterpreterCallCodeDeltaEvent, ResponseCodeInterpreterCallCodeDoneEvent, ResponseCodeInterpreterCallCompletedEvent, ResponseCodeInterpreterCallInProgressEvent, ResponseCodeInterpreterCallInterpretingEvent, ResponseCompletedEvent, ResponseContentPartAddedEvent, ResponseContentPartDoneEvent, ResponseCreatedEvent, ResponseErrorEvent, ResponseFailedEvent, ResponseFileSearchCallCompletedEvent, ResponseFileSearchCallInProgressEvent, ResponseFileSearchCallSearchingEvent, ResponseFunctionCallArgumentsDeltaEvent, ResponseFunctionCallArgumentsDoneEvent, ResponseInProgressEvent, ResponseIncompleteEvent, ResponseOutputItemAddedEvent, ResponseOutputItemDoneEvent, ResponseRefusalDeltaEvent, ResponseRefusalDoneEvent, ResponseTextAnnotationDeltaEvent, ResponseTextDeltaEvent, ResponseTextDoneEvent, ResponseWebSearchCallCompletedEvent, ResponseWebSearchCallInProgressEvent, ResponseWebSearchCallSearchingEvent. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ResponseAudioDeltaEvent] = None
        try:
            instance.actual_instance = ResponseAudioDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ResponseAudioDoneEvent] = None
        try:
            instance.actual_instance = ResponseAudioDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ResponseAudioTranscriptDeltaEvent] = None
        try:
            instance.actual_instance = ResponseAudioTranscriptDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ResponseAudioTranscriptDoneEvent] = None
        try:
            instance.actual_instance = ResponseAudioTranscriptDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[ResponseCodeInterpreterCallCodeDeltaEvent] = None
        try:
            instance.actual_instance = ResponseCodeInterpreterCallCodeDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[ResponseCodeInterpreterCallCodeDoneEvent] = None
        try:
            instance.actual_instance = ResponseCodeInterpreterCallCodeDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[ResponseCodeInterpreterCallCompletedEvent] = None
        try:
            instance.actual_instance = ResponseCodeInterpreterCallCompletedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[ResponseCodeInterpreterCallInProgressEvent] = None
        try:
            instance.actual_instance = ResponseCodeInterpreterCallInProgressEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[ResponseCodeInterpreterCallInterpretingEvent] = None
        try:
            instance.actual_instance = ResponseCodeInterpreterCallInterpretingEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[ResponseCompletedEvent] = None
        try:
            instance.actual_instance = ResponseCompletedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[ResponseContentPartAddedEvent] = None
        try:
            instance.actual_instance = ResponseContentPartAddedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[ResponseContentPartDoneEvent] = None
        try:
            instance.actual_instance = ResponseContentPartDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[ResponseCreatedEvent] = None
        try:
            instance.actual_instance = ResponseCreatedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[ResponseErrorEvent] = None
        try:
            instance.actual_instance = ResponseErrorEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[ResponseFileSearchCallCompletedEvent] = None
        try:
            instance.actual_instance = ResponseFileSearchCallCompletedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[ResponseFileSearchCallInProgressEvent] = None
        try:
            instance.actual_instance = ResponseFileSearchCallInProgressEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[ResponseFileSearchCallSearchingEvent] = None
        try:
            instance.actual_instance = ResponseFileSearchCallSearchingEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[ResponseFunctionCallArgumentsDeltaEvent] = None
        try:
            instance.actual_instance = ResponseFunctionCallArgumentsDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[ResponseFunctionCallArgumentsDoneEvent] = None
        try:
            instance.actual_instance = ResponseFunctionCallArgumentsDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[ResponseInProgressEvent] = None
        try:
            instance.actual_instance = ResponseInProgressEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[ResponseFailedEvent] = None
        try:
            instance.actual_instance = ResponseFailedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[ResponseIncompleteEvent] = None
        try:
            instance.actual_instance = ResponseIncompleteEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[ResponseOutputItemAddedEvent] = None
        try:
            instance.actual_instance = ResponseOutputItemAddedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[ResponseOutputItemDoneEvent] = None
        try:
            instance.actual_instance = ResponseOutputItemDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_25_validator: Optional[ResponseRefusalDeltaEvent] = None
        try:
            instance.actual_instance = ResponseRefusalDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_26_validator: Optional[ResponseRefusalDoneEvent] = None
        try:
            instance.actual_instance = ResponseRefusalDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_27_validator: Optional[ResponseTextAnnotationDeltaEvent] = None
        try:
            instance.actual_instance = ResponseTextAnnotationDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_28_validator: Optional[ResponseTextDeltaEvent] = None
        try:
            instance.actual_instance = ResponseTextDeltaEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_29_validator: Optional[ResponseTextDoneEvent] = None
        try:
            instance.actual_instance = ResponseTextDoneEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_30_validator: Optional[ResponseWebSearchCallCompletedEvent] = None
        try:
            instance.actual_instance = ResponseWebSearchCallCompletedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_31_validator: Optional[ResponseWebSearchCallInProgressEvent] = None
        try:
            instance.actual_instance = ResponseWebSearchCallInProgressEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_32_validator: Optional[ResponseWebSearchCallSearchingEvent] = None
        try:
            instance.actual_instance = ResponseWebSearchCallSearchingEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ResponseStreamEvent with anyOf schemas: ResponseAudioDeltaEvent, ResponseAudioDoneEvent, ResponseAudioTranscriptDeltaEvent, ResponseAudioTranscriptDoneEvent, ResponseCodeInterpreterCallCodeDeltaEvent, ResponseCodeInterpreterCallCodeDoneEvent, ResponseCodeInterpreterCallCompletedEvent, ResponseCodeInterpreterCallInProgressEvent, ResponseCodeInterpreterCallInterpretingEvent, ResponseCompletedEvent, ResponseContentPartAddedEvent, ResponseContentPartDoneEvent, ResponseCreatedEvent, ResponseErrorEvent, ResponseFailedEvent, ResponseFileSearchCallCompletedEvent, ResponseFileSearchCallInProgressEvent, ResponseFileSearchCallSearchingEvent, ResponseFunctionCallArgumentsDeltaEvent, ResponseFunctionCallArgumentsDoneEvent, ResponseInProgressEvent, ResponseIncompleteEvent, ResponseOutputItemAddedEvent, ResponseOutputItemDoneEvent, ResponseRefusalDeltaEvent, ResponseRefusalDoneEvent, ResponseTextAnnotationDeltaEvent, ResponseTextDeltaEvent, ResponseTextDoneEvent, ResponseWebSearchCallCompletedEvent, ResponseWebSearchCallInProgressEvent, ResponseWebSearchCallSearchingEvent. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
