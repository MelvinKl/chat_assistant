# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated

from assistant.models.create_speech_request_model import CreateSpeechRequestModel
from assistant.models.voice_ids_shared import VoiceIdsShared

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CreateSpeechRequest(BaseModel):
    """
    CreateSpeechRequest
    """  # noqa: E501

    model: CreateSpeechRequestModel
    input: Annotated[str, Field(strict=True, max_length=4096)] = Field(
        description="The text to generate audio for. The maximum length is 4096 characters."
    )
    instructions: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = Field(
        default=None,
        description="Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.",
    )
    voice: VoiceIdsShared
    response_format: Optional[StrictStr] = Field(
        default="mp3",
        description="The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.",
    )
    speed: Optional[
        Union[Annotated[float, Field(le=4, strict=True, ge=0.25)], Annotated[int, Field(le=4, strict=True, ge=1)]]
    ] = Field(
        default=1,
        description="The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
    )
    __properties: ClassVar[List[str]] = ["model", "input", "instructions", "voice", "response_format", "speed"]

    @field_validator("response_format")
    def response_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "mp3",
            "opus",
            "aac",
            "flac",
            "wav",
            "pcm",
        ):
            raise ValueError("must be one of enum values ('mp3', 'opus', 'aac', 'flac', 'wav', 'pcm')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateSpeechRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice
        if self.voice:
            _dict["voice"] = self.voice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateSpeechRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "model": CreateSpeechRequestModel.from_dict(obj.get("model")) if obj.get("model") is not None else None,
                "input": obj.get("input"),
                "instructions": obj.get("instructions"),
                "voice": VoiceIdsShared.from_dict(obj.get("voice")) if obj.get("voice") is not None else None,
                "response_format": obj.get("response_format") if obj.get("response_format") is not None else "mp3",
                "speed": obj.get("speed") if obj.get("speed") is not None else 1,
            }
        )
        return _obj
