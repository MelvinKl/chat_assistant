# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.vector_store_file_content_response_data_inner import VectorStoreFileContentResponseDataInner

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class VectorStoreFileContentResponse(BaseModel):
    """
    Represents the parsed content of a vector store file.
    """  # noqa: E501

    object: StrictStr = Field(description="The object type, which is always `vector_store.file_content.page`")
    data: List[VectorStoreFileContentResponseDataInner] = Field(description="Parsed content of the file.")
    has_more: StrictBool = Field(description="Indicates if there are more content pages to fetch.")
    next_page: Optional[StrictStr] = Field(description="The token for the next page, if any.")
    __properties: ClassVar[List[str]] = ["object", "data", "has_more", "next_page"]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("vector_store.file_content.page",):
            raise ValueError("must be one of enum values ('vector_store.file_content.page')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VectorStoreFileContentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict["data"] = _items
        # set to None if next_page (nullable) is None
        # and model_fields_set contains the field
        if self.next_page is None and "next_page" in self.model_fields_set:
            _dict["next_page"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VectorStoreFileContentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "data": (
                    [VectorStoreFileContentResponseDataInner.from_dict(_item) for _item in obj.get("data")]
                    if obj.get("data") is not None
                    else None
                ),
                "has_more": obj.get("has_more"),
                "next_page": obj.get("next_page"),
            }
        )
        return _obj
