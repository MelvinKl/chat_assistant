# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator

from assistant.models.file_search_tool_call_results_inner import (
    FileSearchToolCallResultsInner,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class FileSearchToolCall(BaseModel):
    """
    The results of a file search tool call. See the  [file search guide](/docs/guides/tools-file-search) for more information.
    """  # noqa: E501

    id: StrictStr = Field(description="The unique ID of the file search tool call. ")
    type: StrictStr = Field(description="The type of the file search tool call. Always `file_search_call`. ")
    status: StrictStr = Field(
        description="The status of the file search tool call. One of `in_progress`,  `searching`, `incomplete` or `failed`, "
    )
    queries: List[StrictStr] = Field(description="The queries used to search for files. ")
    results: Optional[List[FileSearchToolCallResultsInner]] = Field(
        default=None, description="The results of the file search tool call. "
    )
    __properties: ClassVar[List[str]] = ["id", "type", "status", "queries", "results"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("file_search_call",):
            raise ValueError("must be one of enum values ('file_search_call')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "in_progress",
            "searching",
            "completed",
            "incomplete",
            "failed",
        ):
            raise ValueError(
                "must be one of enum values ('in_progress', 'searching', 'completed', 'incomplete', 'failed')"
            )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FileSearchToolCall from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict["results"] = _items
        # set to None if results (nullable) is None
        # and model_fields_set contains the field
        if self.results is None and "results" in self.model_fields_set:
            _dict["results"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FileSearchToolCall from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "type": obj.get("type"),
                "status": obj.get("status"),
                "queries": obj.get("queries"),
                "results": (
                    [FileSearchToolCallResultsInner.from_dict(_item) for _item in obj.get("results")]
                    if obj.get("results") is not None
                    else None
                ),
            }
        )
        return _obj
