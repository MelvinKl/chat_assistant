# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401


from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from assistant.models.realtime_server_event_conversation_created import RealtimeServerEventConversationCreated
from assistant.models.realtime_server_event_conversation_item_created import RealtimeServerEventConversationItemCreated
from assistant.models.realtime_server_event_conversation_item_deleted import RealtimeServerEventConversationItemDeleted
from assistant.models.realtime_server_event_conversation_item_input_audio_transcription_completed import (
    RealtimeServerEventConversationItemInputAudioTranscriptionCompleted,
)
from assistant.models.realtime_server_event_conversation_item_input_audio_transcription_delta import (
    RealtimeServerEventConversationItemInputAudioTranscriptionDelta,
)
from assistant.models.realtime_server_event_conversation_item_input_audio_transcription_failed import (
    RealtimeServerEventConversationItemInputAudioTranscriptionFailed,
)
from assistant.models.realtime_server_event_conversation_item_retrieved import (
    RealtimeServerEventConversationItemRetrieved,
)
from assistant.models.realtime_server_event_conversation_item_truncated import (
    RealtimeServerEventConversationItemTruncated,
)
from assistant.models.realtime_server_event_error import RealtimeServerEventError
from assistant.models.realtime_server_event_input_audio_buffer_cleared import RealtimeServerEventInputAudioBufferCleared
from assistant.models.realtime_server_event_input_audio_buffer_committed import (
    RealtimeServerEventInputAudioBufferCommitted,
)
from assistant.models.realtime_server_event_input_audio_buffer_speech_started import (
    RealtimeServerEventInputAudioBufferSpeechStarted,
)
from assistant.models.realtime_server_event_input_audio_buffer_speech_stopped import (
    RealtimeServerEventInputAudioBufferSpeechStopped,
)
from assistant.models.realtime_server_event_rate_limits_updated import RealtimeServerEventRateLimitsUpdated
from assistant.models.realtime_server_event_response_audio_delta import RealtimeServerEventResponseAudioDelta
from assistant.models.realtime_server_event_response_audio_done import RealtimeServerEventResponseAudioDone
from assistant.models.realtime_server_event_response_audio_transcript_delta import (
    RealtimeServerEventResponseAudioTranscriptDelta,
)
from assistant.models.realtime_server_event_response_audio_transcript_done import (
    RealtimeServerEventResponseAudioTranscriptDone,
)
from assistant.models.realtime_server_event_response_content_part_added import (
    RealtimeServerEventResponseContentPartAdded,
)
from assistant.models.realtime_server_event_response_content_part_done import RealtimeServerEventResponseContentPartDone
from assistant.models.realtime_server_event_response_created import RealtimeServerEventResponseCreated
from assistant.models.realtime_server_event_response_done import RealtimeServerEventResponseDone
from assistant.models.realtime_server_event_response_function_call_arguments_delta import (
    RealtimeServerEventResponseFunctionCallArgumentsDelta,
)
from assistant.models.realtime_server_event_response_function_call_arguments_done import (
    RealtimeServerEventResponseFunctionCallArgumentsDone,
)
from assistant.models.realtime_server_event_response_output_item_added import RealtimeServerEventResponseOutputItemAdded
from assistant.models.realtime_server_event_response_output_item_done import RealtimeServerEventResponseOutputItemDone
from assistant.models.realtime_server_event_response_text_delta import RealtimeServerEventResponseTextDelta
from assistant.models.realtime_server_event_response_text_done import RealtimeServerEventResponseTextDone
from assistant.models.realtime_server_event_session_created import RealtimeServerEventSessionCreated
from assistant.models.realtime_server_event_session_updated import RealtimeServerEventSessionUpdated
from assistant.models.realtime_server_event_transcription_session_updated import (
    RealtimeServerEventTranscriptionSessionUpdated,
)
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

REALTIMESERVEREVENT_ANY_OF_SCHEMAS = [
    "RealtimeServerEventConversationCreated",
    "RealtimeServerEventConversationItemCreated",
    "RealtimeServerEventConversationItemDeleted",
    "RealtimeServerEventConversationItemInputAudioTranscriptionCompleted",
    "RealtimeServerEventConversationItemInputAudioTranscriptionDelta",
    "RealtimeServerEventConversationItemInputAudioTranscriptionFailed",
    "RealtimeServerEventConversationItemRetrieved",
    "RealtimeServerEventConversationItemTruncated",
    "RealtimeServerEventError",
    "RealtimeServerEventInputAudioBufferCleared",
    "RealtimeServerEventInputAudioBufferCommitted",
    "RealtimeServerEventInputAudioBufferSpeechStarted",
    "RealtimeServerEventInputAudioBufferSpeechStopped",
    "RealtimeServerEventRateLimitsUpdated",
    "RealtimeServerEventResponseAudioDelta",
    "RealtimeServerEventResponseAudioDone",
    "RealtimeServerEventResponseAudioTranscriptDelta",
    "RealtimeServerEventResponseAudioTranscriptDone",
    "RealtimeServerEventResponseContentPartAdded",
    "RealtimeServerEventResponseContentPartDone",
    "RealtimeServerEventResponseCreated",
    "RealtimeServerEventResponseDone",
    "RealtimeServerEventResponseFunctionCallArgumentsDelta",
    "RealtimeServerEventResponseFunctionCallArgumentsDone",
    "RealtimeServerEventResponseOutputItemAdded",
    "RealtimeServerEventResponseOutputItemDone",
    "RealtimeServerEventResponseTextDelta",
    "RealtimeServerEventResponseTextDone",
    "RealtimeServerEventSessionCreated",
    "RealtimeServerEventSessionUpdated",
    "RealtimeServerEventTranscriptionSessionUpdated",
]


class RealtimeServerEvent(BaseModel):
    """
    A realtime server event.
    """

    # data type: RealtimeServerEventConversationCreated
    anyof_schema_1_validator: Optional[RealtimeServerEventConversationCreated] = None
    # data type: RealtimeServerEventConversationItemCreated
    anyof_schema_2_validator: Optional[RealtimeServerEventConversationItemCreated] = None
    # data type: RealtimeServerEventConversationItemDeleted
    anyof_schema_3_validator: Optional[RealtimeServerEventConversationItemDeleted] = None
    # data type: RealtimeServerEventConversationItemInputAudioTranscriptionCompleted
    anyof_schema_4_validator: Optional[RealtimeServerEventConversationItemInputAudioTranscriptionCompleted] = None
    # data type: RealtimeServerEventConversationItemInputAudioTranscriptionDelta
    anyof_schema_5_validator: Optional[RealtimeServerEventConversationItemInputAudioTranscriptionDelta] = None
    # data type: RealtimeServerEventConversationItemInputAudioTranscriptionFailed
    anyof_schema_6_validator: Optional[RealtimeServerEventConversationItemInputAudioTranscriptionFailed] = None
    # data type: RealtimeServerEventConversationItemRetrieved
    anyof_schema_7_validator: Optional[RealtimeServerEventConversationItemRetrieved] = None
    # data type: RealtimeServerEventConversationItemTruncated
    anyof_schema_8_validator: Optional[RealtimeServerEventConversationItemTruncated] = None
    # data type: RealtimeServerEventError
    anyof_schema_9_validator: Optional[RealtimeServerEventError] = None
    # data type: RealtimeServerEventInputAudioBufferCleared
    anyof_schema_10_validator: Optional[RealtimeServerEventInputAudioBufferCleared] = None
    # data type: RealtimeServerEventInputAudioBufferCommitted
    anyof_schema_11_validator: Optional[RealtimeServerEventInputAudioBufferCommitted] = None
    # data type: RealtimeServerEventInputAudioBufferSpeechStarted
    anyof_schema_12_validator: Optional[RealtimeServerEventInputAudioBufferSpeechStarted] = None
    # data type: RealtimeServerEventInputAudioBufferSpeechStopped
    anyof_schema_13_validator: Optional[RealtimeServerEventInputAudioBufferSpeechStopped] = None
    # data type: RealtimeServerEventRateLimitsUpdated
    anyof_schema_14_validator: Optional[RealtimeServerEventRateLimitsUpdated] = None
    # data type: RealtimeServerEventResponseAudioDelta
    anyof_schema_15_validator: Optional[RealtimeServerEventResponseAudioDelta] = None
    # data type: RealtimeServerEventResponseAudioDone
    anyof_schema_16_validator: Optional[RealtimeServerEventResponseAudioDone] = None
    # data type: RealtimeServerEventResponseAudioTranscriptDelta
    anyof_schema_17_validator: Optional[RealtimeServerEventResponseAudioTranscriptDelta] = None
    # data type: RealtimeServerEventResponseAudioTranscriptDone
    anyof_schema_18_validator: Optional[RealtimeServerEventResponseAudioTranscriptDone] = None
    # data type: RealtimeServerEventResponseContentPartAdded
    anyof_schema_19_validator: Optional[RealtimeServerEventResponseContentPartAdded] = None
    # data type: RealtimeServerEventResponseContentPartDone
    anyof_schema_20_validator: Optional[RealtimeServerEventResponseContentPartDone] = None
    # data type: RealtimeServerEventResponseCreated
    anyof_schema_21_validator: Optional[RealtimeServerEventResponseCreated] = None
    # data type: RealtimeServerEventResponseDone
    anyof_schema_22_validator: Optional[RealtimeServerEventResponseDone] = None
    # data type: RealtimeServerEventResponseFunctionCallArgumentsDelta
    anyof_schema_23_validator: Optional[RealtimeServerEventResponseFunctionCallArgumentsDelta] = None
    # data type: RealtimeServerEventResponseFunctionCallArgumentsDone
    anyof_schema_24_validator: Optional[RealtimeServerEventResponseFunctionCallArgumentsDone] = None
    # data type: RealtimeServerEventResponseOutputItemAdded
    anyof_schema_25_validator: Optional[RealtimeServerEventResponseOutputItemAdded] = None
    # data type: RealtimeServerEventResponseOutputItemDone
    anyof_schema_26_validator: Optional[RealtimeServerEventResponseOutputItemDone] = None
    # data type: RealtimeServerEventResponseTextDelta
    anyof_schema_27_validator: Optional[RealtimeServerEventResponseTextDelta] = None
    # data type: RealtimeServerEventResponseTextDone
    anyof_schema_28_validator: Optional[RealtimeServerEventResponseTextDone] = None
    # data type: RealtimeServerEventSessionCreated
    anyof_schema_29_validator: Optional[RealtimeServerEventSessionCreated] = None
    # data type: RealtimeServerEventSessionUpdated
    anyof_schema_30_validator: Optional[RealtimeServerEventSessionUpdated] = None
    # data type: RealtimeServerEventTranscriptionSessionUpdated
    anyof_schema_31_validator: Optional[RealtimeServerEventTranscriptionSessionUpdated] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                RealtimeServerEventConversationCreated,
                RealtimeServerEventConversationItemCreated,
                RealtimeServerEventConversationItemDeleted,
                RealtimeServerEventConversationItemInputAudioTranscriptionCompleted,
                RealtimeServerEventConversationItemInputAudioTranscriptionDelta,
                RealtimeServerEventConversationItemInputAudioTranscriptionFailed,
                RealtimeServerEventConversationItemRetrieved,
                RealtimeServerEventConversationItemTruncated,
                RealtimeServerEventError,
                RealtimeServerEventInputAudioBufferCleared,
                RealtimeServerEventInputAudioBufferCommitted,
                RealtimeServerEventInputAudioBufferSpeechStarted,
                RealtimeServerEventInputAudioBufferSpeechStopped,
                RealtimeServerEventRateLimitsUpdated,
                RealtimeServerEventResponseAudioDelta,
                RealtimeServerEventResponseAudioDone,
                RealtimeServerEventResponseAudioTranscriptDelta,
                RealtimeServerEventResponseAudioTranscriptDone,
                RealtimeServerEventResponseContentPartAdded,
                RealtimeServerEventResponseContentPartDone,
                RealtimeServerEventResponseCreated,
                RealtimeServerEventResponseDone,
                RealtimeServerEventResponseFunctionCallArgumentsDelta,
                RealtimeServerEventResponseFunctionCallArgumentsDone,
                RealtimeServerEventResponseOutputItemAdded,
                RealtimeServerEventResponseOutputItemDone,
                RealtimeServerEventResponseTextDelta,
                RealtimeServerEventResponseTextDone,
                RealtimeServerEventSessionCreated,
                RealtimeServerEventSessionUpdated,
                RealtimeServerEventTranscriptionSessionUpdated,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[REALTIMESERVEREVENT_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = RealtimeServerEvent.model_construct()
        error_messages = []
        # validate data type: RealtimeServerEventConversationCreated
        if not isinstance(v, RealtimeServerEventConversationCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationCreated`")
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemCreated
        if not isinstance(v, RealtimeServerEventConversationItemCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemCreated`")
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemDeleted
        if not isinstance(v, RealtimeServerEventConversationItemDeleted):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemDeleted`")
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemInputAudioTranscriptionCompleted
        if not isinstance(v, RealtimeServerEventConversationItemInputAudioTranscriptionCompleted):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemInputAudioTranscriptionCompleted`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemInputAudioTranscriptionDelta
        if not isinstance(v, RealtimeServerEventConversationItemInputAudioTranscriptionDelta):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemInputAudioTranscriptionDelta`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemInputAudioTranscriptionFailed
        if not isinstance(v, RealtimeServerEventConversationItemInputAudioTranscriptionFailed):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemInputAudioTranscriptionFailed`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemRetrieved
        if not isinstance(v, RealtimeServerEventConversationItemRetrieved):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemRetrieved`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventConversationItemTruncated
        if not isinstance(v, RealtimeServerEventConversationItemTruncated):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventConversationItemTruncated`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventError
        if not isinstance(v, RealtimeServerEventError):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventError`")
        else:
            return v

        # validate data type: RealtimeServerEventInputAudioBufferCleared
        if not isinstance(v, RealtimeServerEventInputAudioBufferCleared):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventInputAudioBufferCleared`")
        else:
            return v

        # validate data type: RealtimeServerEventInputAudioBufferCommitted
        if not isinstance(v, RealtimeServerEventInputAudioBufferCommitted):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventInputAudioBufferCommitted`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventInputAudioBufferSpeechStarted
        if not isinstance(v, RealtimeServerEventInputAudioBufferSpeechStarted):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventInputAudioBufferSpeechStarted`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventInputAudioBufferSpeechStopped
        if not isinstance(v, RealtimeServerEventInputAudioBufferSpeechStopped):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventInputAudioBufferSpeechStopped`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventRateLimitsUpdated
        if not isinstance(v, RealtimeServerEventRateLimitsUpdated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventRateLimitsUpdated`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseAudioDelta
        if not isinstance(v, RealtimeServerEventResponseAudioDelta):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseAudioDelta`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseAudioDone
        if not isinstance(v, RealtimeServerEventResponseAudioDone):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseAudioDone`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseAudioTranscriptDelta
        if not isinstance(v, RealtimeServerEventResponseAudioTranscriptDelta):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseAudioTranscriptDelta`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventResponseAudioTranscriptDone
        if not isinstance(v, RealtimeServerEventResponseAudioTranscriptDone):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseAudioTranscriptDone`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventResponseContentPartAdded
        if not isinstance(v, RealtimeServerEventResponseContentPartAdded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseContentPartAdded`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseContentPartDone
        if not isinstance(v, RealtimeServerEventResponseContentPartDone):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseContentPartDone`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseCreated
        if not isinstance(v, RealtimeServerEventResponseCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseCreated`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseDone
        if not isinstance(v, RealtimeServerEventResponseDone):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseDone`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseFunctionCallArgumentsDelta
        if not isinstance(v, RealtimeServerEventResponseFunctionCallArgumentsDelta):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseFunctionCallArgumentsDelta`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventResponseFunctionCallArgumentsDone
        if not isinstance(v, RealtimeServerEventResponseFunctionCallArgumentsDone):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseFunctionCallArgumentsDone`"
            )
        else:
            return v

        # validate data type: RealtimeServerEventResponseOutputItemAdded
        if not isinstance(v, RealtimeServerEventResponseOutputItemAdded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseOutputItemAdded`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseOutputItemDone
        if not isinstance(v, RealtimeServerEventResponseOutputItemDone):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseOutputItemDone`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseTextDelta
        if not isinstance(v, RealtimeServerEventResponseTextDelta):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseTextDelta`")
        else:
            return v

        # validate data type: RealtimeServerEventResponseTextDone
        if not isinstance(v, RealtimeServerEventResponseTextDone):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventResponseTextDone`")
        else:
            return v

        # validate data type: RealtimeServerEventSessionCreated
        if not isinstance(v, RealtimeServerEventSessionCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventSessionCreated`")
        else:
            return v

        # validate data type: RealtimeServerEventSessionUpdated
        if not isinstance(v, RealtimeServerEventSessionUpdated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealtimeServerEventSessionUpdated`")
        else:
            return v

        # validate data type: RealtimeServerEventTranscriptionSessionUpdated
        if not isinstance(v, RealtimeServerEventTranscriptionSessionUpdated):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `RealtimeServerEventTranscriptionSessionUpdated`"
            )
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in RealtimeServerEvent with anyOf schemas: RealtimeServerEventConversationCreated, RealtimeServerEventConversationItemCreated, RealtimeServerEventConversationItemDeleted, RealtimeServerEventConversationItemInputAudioTranscriptionCompleted, RealtimeServerEventConversationItemInputAudioTranscriptionDelta, RealtimeServerEventConversationItemInputAudioTranscriptionFailed, RealtimeServerEventConversationItemRetrieved, RealtimeServerEventConversationItemTruncated, RealtimeServerEventError, RealtimeServerEventInputAudioBufferCleared, RealtimeServerEventInputAudioBufferCommitted, RealtimeServerEventInputAudioBufferSpeechStarted, RealtimeServerEventInputAudioBufferSpeechStopped, RealtimeServerEventRateLimitsUpdated, RealtimeServerEventResponseAudioDelta, RealtimeServerEventResponseAudioDone, RealtimeServerEventResponseAudioTranscriptDelta, RealtimeServerEventResponseAudioTranscriptDone, RealtimeServerEventResponseContentPartAdded, RealtimeServerEventResponseContentPartDone, RealtimeServerEventResponseCreated, RealtimeServerEventResponseDone, RealtimeServerEventResponseFunctionCallArgumentsDelta, RealtimeServerEventResponseFunctionCallArgumentsDone, RealtimeServerEventResponseOutputItemAdded, RealtimeServerEventResponseOutputItemDone, RealtimeServerEventResponseTextDelta, RealtimeServerEventResponseTextDone, RealtimeServerEventSessionCreated, RealtimeServerEventSessionUpdated, RealtimeServerEventTranscriptionSessionUpdated. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[RealtimeServerEventConversationCreated] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationCreated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[RealtimeServerEventConversationItemCreated] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemCreated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[RealtimeServerEventConversationItemDeleted] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemDeleted.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[RealtimeServerEventConversationItemInputAudioTranscriptionCompleted] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemInputAudioTranscriptionCompleted.from_json(
                json_str
            )
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[RealtimeServerEventConversationItemInputAudioTranscriptionDelta] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemInputAudioTranscriptionDelta.from_json(
                json_str
            )
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[RealtimeServerEventConversationItemInputAudioTranscriptionFailed] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemInputAudioTranscriptionFailed.from_json(
                json_str
            )
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[RealtimeServerEventConversationItemRetrieved] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemRetrieved.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[RealtimeServerEventConversationItemTruncated] = None
        try:
            instance.actual_instance = RealtimeServerEventConversationItemTruncated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[RealtimeServerEventError] = None
        try:
            instance.actual_instance = RealtimeServerEventError.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[RealtimeServerEventInputAudioBufferCleared] = None
        try:
            instance.actual_instance = RealtimeServerEventInputAudioBufferCleared.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[RealtimeServerEventInputAudioBufferCommitted] = None
        try:
            instance.actual_instance = RealtimeServerEventInputAudioBufferCommitted.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[RealtimeServerEventInputAudioBufferSpeechStarted] = None
        try:
            instance.actual_instance = RealtimeServerEventInputAudioBufferSpeechStarted.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[RealtimeServerEventInputAudioBufferSpeechStopped] = None
        try:
            instance.actual_instance = RealtimeServerEventInputAudioBufferSpeechStopped.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[RealtimeServerEventRateLimitsUpdated] = None
        try:
            instance.actual_instance = RealtimeServerEventRateLimitsUpdated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[RealtimeServerEventResponseAudioDelta] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseAudioDelta.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[RealtimeServerEventResponseAudioDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseAudioDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[RealtimeServerEventResponseAudioTranscriptDelta] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseAudioTranscriptDelta.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[RealtimeServerEventResponseAudioTranscriptDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseAudioTranscriptDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[RealtimeServerEventResponseContentPartAdded] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseContentPartAdded.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[RealtimeServerEventResponseContentPartDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseContentPartDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[RealtimeServerEventResponseCreated] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseCreated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[RealtimeServerEventResponseDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[RealtimeServerEventResponseFunctionCallArgumentsDelta] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseFunctionCallArgumentsDelta.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[RealtimeServerEventResponseFunctionCallArgumentsDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseFunctionCallArgumentsDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_25_validator: Optional[RealtimeServerEventResponseOutputItemAdded] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseOutputItemAdded.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_26_validator: Optional[RealtimeServerEventResponseOutputItemDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseOutputItemDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_27_validator: Optional[RealtimeServerEventResponseTextDelta] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseTextDelta.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_28_validator: Optional[RealtimeServerEventResponseTextDone] = None
        try:
            instance.actual_instance = RealtimeServerEventResponseTextDone.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_29_validator: Optional[RealtimeServerEventSessionCreated] = None
        try:
            instance.actual_instance = RealtimeServerEventSessionCreated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_30_validator: Optional[RealtimeServerEventSessionUpdated] = None
        try:
            instance.actual_instance = RealtimeServerEventSessionUpdated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_31_validator: Optional[RealtimeServerEventTranscriptionSessionUpdated] = None
        try:
            instance.actual_instance = RealtimeServerEventTranscriptionSessionUpdated.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into RealtimeServerEvent with anyOf schemas: RealtimeServerEventConversationCreated, RealtimeServerEventConversationItemCreated, RealtimeServerEventConversationItemDeleted, RealtimeServerEventConversationItemInputAudioTranscriptionCompleted, RealtimeServerEventConversationItemInputAudioTranscriptionDelta, RealtimeServerEventConversationItemInputAudioTranscriptionFailed, RealtimeServerEventConversationItemRetrieved, RealtimeServerEventConversationItemTruncated, RealtimeServerEventError, RealtimeServerEventInputAudioBufferCleared, RealtimeServerEventInputAudioBufferCommitted, RealtimeServerEventInputAudioBufferSpeechStarted, RealtimeServerEventInputAudioBufferSpeechStopped, RealtimeServerEventRateLimitsUpdated, RealtimeServerEventResponseAudioDelta, RealtimeServerEventResponseAudioDone, RealtimeServerEventResponseAudioTranscriptDelta, RealtimeServerEventResponseAudioTranscriptDone, RealtimeServerEventResponseContentPartAdded, RealtimeServerEventResponseContentPartDone, RealtimeServerEventResponseCreated, RealtimeServerEventResponseDone, RealtimeServerEventResponseFunctionCallArgumentsDelta, RealtimeServerEventResponseFunctionCallArgumentsDone, RealtimeServerEventResponseOutputItemAdded, RealtimeServerEventResponseOutputItemDone, RealtimeServerEventResponseTextDelta, RealtimeServerEventResponseTextDone, RealtimeServerEventSessionCreated, RealtimeServerEventSessionUpdated, RealtimeServerEventTranscriptionSessionUpdated. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
