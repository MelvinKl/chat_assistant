# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.input_content import InputContent

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class InputMessage(BaseModel):
    """
    A message input to the model with a role indicating instruction following hierarchy. Instructions given with the `developer` or `system` role take precedence over instructions given with the `user` role.
    """  # noqa: E501

    type: Optional[StrictStr] = Field(
        default=None, description="The type of the message input. Always set to `message`. "
    )
    role: StrictStr = Field(description="The role of the message input. One of `user`, `system`, or `developer`. ")
    status: Optional[StrictStr] = Field(
        default=None,
        description="The status of item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. ",
    )
    content: List[InputContent] = Field(
        description="A list of one or many input items to the model, containing different content  types. "
    )
    __properties: ClassVar[List[str]] = ["type", "role", "status", "content"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("message",):
            raise ValueError("must be one of enum values ('message')")
        return value

    @field_validator("role")
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "user",
            "system",
            "developer",
        ):
            raise ValueError("must be one of enum values ('user', 'system', 'developer')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "in_progress",
            "completed",
            "incomplete",
        ):
            raise ValueError("must be one of enum values ('in_progress', 'completed', 'incomplete')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InputMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item in self.content:
                if _item:
                    _items.append(_item.to_dict())
            _dict["content"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InputMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "role": obj.get("role"),
                "status": obj.get("status"),
                "content": (
                    [InputContent.from_dict(_item) for _item in obj.get("content")]
                    if obj.get("content") is not None
                    else None
                ),
            }
        )
        return _obj
