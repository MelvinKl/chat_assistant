# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)

from assistant.models.realtime_conversation_item_with_reference import (
    RealtimeConversationItemWithReference,
)
from assistant.models.realtime_response_create_params_conversation import (
    RealtimeResponseCreateParamsConversation,
)
from assistant.models.realtime_response_create_params_max_response_output_tokens import (
    RealtimeResponseCreateParamsMaxResponseOutputTokens,
)
from assistant.models.realtime_response_create_params_tools_inner import (
    RealtimeResponseCreateParamsToolsInner,
)
from assistant.models.voice_ids_shared import VoiceIdsShared

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RealtimeResponseCreateParams(BaseModel):
    """
    Create a new Realtime response with these parameters
    """  # noqa: E501

    modalities: Optional[List[StrictStr]] = Field(
        default=None,
        description='The set of modalities the model can respond with. To disable audio, set this to ["text"]. ',
    )
    instructions: Optional[StrictStr] = Field(
        default=None,
        description='The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. "be extremely succinct", "act friendly", "here are examples of good  responses") and on audio behavior (e.g. "talk quickly", "inject emotion  into your voice", "laugh frequently"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the  desired behavior.  Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session. ',
    )
    voice: Optional[VoiceIdsShared] = None
    output_audio_format: Optional[StrictStr] = Field(
        default=None, description="The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. "
    )
    tools: Optional[List[RealtimeResponseCreateParamsToolsInner]] = Field(
        default=None, description="Tools (functions) available to the model."
    )
    tool_choice: Optional[StrictStr] = Field(
        default=None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or  specify a function, like `{"type": "function", "function": {"name": "my_function"}}`. ',
    )
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. "
    )
    max_response_output_tokens: Optional[RealtimeResponseCreateParamsMaxResponseOutputTokens] = None
    conversation: Optional[RealtimeResponseCreateParamsConversation] = None
    metadata: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. ",
    )
    input: Optional[List[RealtimeConversationItemWithReference]] = Field(
        default=None,
        description="Input items to include in the prompt for the model. Using this field creates a new context for this Response instead of using the default conversation. An empty array `[]` will clear the context for this Response. Note that this can include references to items from the default conversation. ",
    )
    __properties: ClassVar[List[str]] = [
        "modalities",
        "instructions",
        "voice",
        "output_audio_format",
        "tools",
        "tool_choice",
        "temperature",
        "max_response_output_tokens",
        "conversation",
        "metadata",
        "input",
    ]

    @field_validator("modalities")
    def modalities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (
                "text",
                "audio",
            ):
                raise ValueError("each list item must be one of ('text', 'audio')")
        return value

    @field_validator("output_audio_format")
    def output_audio_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "pcm16",
            "g711_ulaw",
            "g711_alaw",
        ):
            raise ValueError("must be one of enum values ('pcm16', 'g711_ulaw', 'g711_alaw')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RealtimeResponseCreateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of voice
        if self.voice:
            _dict["voice"] = self.voice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tools"] = _items
        # override the default output from pydantic by calling `to_dict()` of max_response_output_tokens
        if self.max_response_output_tokens:
            _dict["max_response_output_tokens"] = self.max_response_output_tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict["conversation"] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in input (list)
        _items = []
        if self.input:
            for _item in self.input:
                if _item:
                    _items.append(_item.to_dict())
            _dict["input"] = _items
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict["metadata"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RealtimeResponseCreateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "modalities": obj.get("modalities"),
                "instructions": obj.get("instructions"),
                "voice": VoiceIdsShared.from_dict(obj.get("voice")) if obj.get("voice") is not None else None,
                "output_audio_format": obj.get("output_audio_format"),
                "tools": (
                    [RealtimeResponseCreateParamsToolsInner.from_dict(_item) for _item in obj.get("tools")]
                    if obj.get("tools") is not None
                    else None
                ),
                "tool_choice": obj.get("tool_choice"),
                "temperature": obj.get("temperature"),
                "max_response_output_tokens": (
                    RealtimeResponseCreateParamsMaxResponseOutputTokens.from_dict(obj.get("max_response_output_tokens"))
                    if obj.get("max_response_output_tokens") is not None
                    else None
                ),
                "conversation": (
                    RealtimeResponseCreateParamsConversation.from_dict(obj.get("conversation"))
                    if obj.get("conversation") is not None
                    else None
                ),
                "metadata": obj.get("metadata"),
                "input": (
                    [RealtimeConversationItemWithReference.from_dict(_item) for _item in obj.get("input")]
                    if obj.get("input") is not None
                    else None
                ),
            }
        )
        return _obj
