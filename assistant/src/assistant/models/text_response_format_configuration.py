# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401


from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from assistant.models.response_format_json_object import ResponseFormatJsonObject
from assistant.models.response_format_text import ResponseFormatText
from assistant.models.text_response_format_json_schema import TextResponseFormatJsonSchema
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

TEXTRESPONSEFORMATCONFIGURATION_ONE_OF_SCHEMAS = [
    "ResponseFormatJsonObject",
    "ResponseFormatText",
    "TextResponseFormatJsonSchema",
]


class TextResponseFormatConfiguration(BaseModel):
    """
    An object specifying the format that the model must output.  Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs,  which ensures the model will match your supplied JSON schema. Learn more in the  [Structured Outputs guide](/docs/guides/structured-outputs).  The default format is `{ \"type\": \"text\" }` with no additional options.  **Not recommended for gpt-4o and newer models:**  Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which ensures the message the model generates is valid JSON. Using `json_schema` is preferred for models that support it.
    """

    # data type: ResponseFormatText
    oneof_schema_1_validator: Optional[ResponseFormatText] = None
    # data type: TextResponseFormatJsonSchema
    oneof_schema_2_validator: Optional[TextResponseFormatJsonSchema] = None
    # data type: ResponseFormatJsonObject
    oneof_schema_3_validator: Optional[ResponseFormatJsonObject] = None
    actual_instance: Optional[Union[ResponseFormatJsonObject, ResponseFormatText, TextResponseFormatJsonSchema]] = None
    one_of_schemas: List[str] = Literal[
        "ResponseFormatJsonObject", "ResponseFormatText", "TextResponseFormatJsonSchema"
    ]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = TextResponseFormatConfiguration.model_construct()
        error_messages = []
        match = 0
        # validate data type: ResponseFormatText
        if not isinstance(v, ResponseFormatText):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFormatText`")
        else:
            match += 1
        # validate data type: TextResponseFormatJsonSchema
        if not isinstance(v, TextResponseFormatJsonSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextResponseFormatJsonSchema`")
        else:
            match += 1
        # validate data type: ResponseFormatJsonObject
        if not isinstance(v, ResponseFormatJsonObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseFormatJsonObject`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in TextResponseFormatConfiguration with oneOf schemas: ResponseFormatJsonObject, ResponseFormatText, TextResponseFormatJsonSchema. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in TextResponseFormatConfiguration with oneOf schemas: ResponseFormatJsonObject, ResponseFormatText, TextResponseFormatJsonSchema. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ResponseFormatText
        try:
            instance.actual_instance = ResponseFormatText.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextResponseFormatJsonSchema
        try:
            instance.actual_instance = TextResponseFormatJsonSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ResponseFormatJsonObject
        try:
            instance.actual_instance = ResponseFormatJsonObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into TextResponseFormatConfiguration with oneOf schemas: ResponseFormatJsonObject, ResponseFormatText, TextResponseFormatJsonSchema. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into TextResponseFormatConfiguration with oneOf schemas: ResponseFormatJsonObject, ResponseFormatText, TextResponseFormatJsonSchema. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
