# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr

from assistant.models.admin_api_key import AdminApiKey

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ApiKeyList(BaseModel):
    """
    ApiKeyList
    """  # noqa: E501

    object: Optional[StrictStr] = None
    data: Optional[List[AdminApiKey]] = None
    has_more: Optional[StrictBool] = None
    first_id: Optional[StrictStr] = None
    last_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["object", "data", "has_more", "first_id", "last_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApiKeyList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict["data"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApiKeyList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "data": (
                    [AdminApiKey.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None
                ),
                "has_more": obj.get("has_more"),
                "first_id": obj.get("first_id"),
                "last_id": obj.get("last_id"),
            }
        )
        return _obj
