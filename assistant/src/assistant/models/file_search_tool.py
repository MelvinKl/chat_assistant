# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.file_search_tool_filters import FileSearchToolFilters
from assistant.models.file_search_tool_ranking_options import FileSearchToolRankingOptions
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FileSearchTool(BaseModel):
    """
    A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](/docs/guides/tools-file-search). 
    """ # noqa: E501
    type: StrictStr = Field(description="The type of the file search tool. Always `file_search`. ")
    vector_store_ids: List[StrictStr] = Field(description="The IDs of the vector stores to search. ")
    max_num_results: Optional[StrictInt] = Field(default=None, description="The maximum number of results to return. This number should be between 1  and 50 inclusive. ")
    filters: Optional[FileSearchToolFilters] = None
    ranking_options: Optional[FileSearchToolRankingOptions] = None
    __properties: ClassVar[List[str]] = ["type", "vector_store_ids", "max_num_results", "filters", "ranking_options"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('file_search',):
            raise ValueError("must be one of enum values ('file_search')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FileSearchTool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranking_options
        if self.ranking_options:
            _dict['ranking_options'] = self.ranking_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FileSearchTool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "vector_store_ids": obj.get("vector_store_ids"),
            "max_num_results": obj.get("max_num_results"),
            "filters": FileSearchToolFilters.from_dict(obj.get("filters")) if obj.get("filters") is not None else None,
            "ranking_options": FileSearchToolRankingOptions.from_dict(obj.get("ranking_options")) if obj.get("ranking_options") is not None else None
        })
        return _obj


