# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Literal

from assistant.models.computer_tool_call import ComputerToolCall
from assistant.models.computer_tool_call_output_resource import (
    ComputerToolCallOutputResource,
)
from assistant.models.file_search_tool_call import FileSearchToolCall
from assistant.models.function_tool_call_output_resource import (
    FunctionToolCallOutputResource,
)
from assistant.models.function_tool_call_resource import FunctionToolCallResource
from assistant.models.input_message_resource import InputMessageResource
from assistant.models.output_message import OutputMessage
from assistant.models.web_search_tool_call import WebSearchToolCall

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

ITEMRESOURCE_ONE_OF_SCHEMAS = [
    "ComputerToolCall",
    "ComputerToolCallOutputResource",
    "FileSearchToolCall",
    "FunctionToolCallOutputResource",
    "FunctionToolCallResource",
    "InputMessageResource",
    "OutputMessage",
    "WebSearchToolCall",
]


class ItemResource(BaseModel):
    """
    Content item used to generate a response.
    """

    # data type: InputMessageResource
    oneof_schema_1_validator: Optional[InputMessageResource] = None
    # data type: OutputMessage
    oneof_schema_2_validator: Optional[OutputMessage] = None
    # data type: FileSearchToolCall
    oneof_schema_3_validator: Optional[FileSearchToolCall] = None
    # data type: ComputerToolCall
    oneof_schema_4_validator: Optional[ComputerToolCall] = None
    # data type: ComputerToolCallOutputResource
    oneof_schema_5_validator: Optional[ComputerToolCallOutputResource] = None
    # data type: WebSearchToolCall
    oneof_schema_6_validator: Optional[WebSearchToolCall] = None
    # data type: FunctionToolCallResource
    oneof_schema_7_validator: Optional[FunctionToolCallResource] = None
    # data type: FunctionToolCallOutputResource
    oneof_schema_8_validator: Optional[FunctionToolCallOutputResource] = None
    actual_instance: Optional[
        Union[
            ComputerToolCall,
            ComputerToolCallOutputResource,
            FileSearchToolCall,
            FunctionToolCallOutputResource,
            FunctionToolCallResource,
            InputMessageResource,
            OutputMessage,
            WebSearchToolCall,
        ]
    ] = None
    one_of_schemas: List[str] = Literal[
        "ComputerToolCall",
        "ComputerToolCallOutputResource",
        "FileSearchToolCall",
        "FunctionToolCallOutputResource",
        "FunctionToolCallResource",
        "InputMessageResource",
        "OutputMessage",
        "WebSearchToolCall",
    ]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = ItemResource.model_construct()
        error_messages = []
        match = 0
        # validate data type: InputMessageResource
        if not isinstance(v, InputMessageResource):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InputMessageResource`")
        else:
            match += 1
        # validate data type: OutputMessage
        if not isinstance(v, OutputMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OutputMessage`")
        else:
            match += 1
        # validate data type: FileSearchToolCall
        if not isinstance(v, FileSearchToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileSearchToolCall`")
        else:
            match += 1
        # validate data type: ComputerToolCall
        if not isinstance(v, ComputerToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComputerToolCall`")
        else:
            match += 1
        # validate data type: ComputerToolCallOutputResource
        if not isinstance(v, ComputerToolCallOutputResource):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComputerToolCallOutputResource`")
        else:
            match += 1
        # validate data type: WebSearchToolCall
        if not isinstance(v, WebSearchToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebSearchToolCall`")
        else:
            match += 1
        # validate data type: FunctionToolCallResource
        if not isinstance(v, FunctionToolCallResource):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionToolCallResource`")
        else:
            match += 1
        # validate data type: FunctionToolCallOutputResource
        if not isinstance(v, FunctionToolCallOutputResource):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionToolCallOutputResource`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in ItemResource with oneOf schemas: ComputerToolCall, ComputerToolCallOutputResource, FileSearchToolCall, FunctionToolCallOutputResource, FunctionToolCallResource, InputMessageResource, OutputMessage, WebSearchToolCall. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in ItemResource with oneOf schemas: ComputerToolCall, ComputerToolCallOutputResource, FileSearchToolCall, FunctionToolCallOutputResource, FunctionToolCallResource, InputMessageResource, OutputMessage, WebSearchToolCall. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into InputMessageResource
        try:
            instance.actual_instance = InputMessageResource.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OutputMessage
        try:
            instance.actual_instance = OutputMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileSearchToolCall
        try:
            instance.actual_instance = FileSearchToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ComputerToolCall
        try:
            instance.actual_instance = ComputerToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ComputerToolCallOutputResource
        try:
            instance.actual_instance = ComputerToolCallOutputResource.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebSearchToolCall
        try:
            instance.actual_instance = WebSearchToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionToolCallResource
        try:
            instance.actual_instance = FunctionToolCallResource.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionToolCallOutputResource
        try:
            instance.actual_instance = FunctionToolCallOutputResource.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into ItemResource with oneOf schemas: ComputerToolCall, ComputerToolCallOutputResource, FileSearchToolCall, FunctionToolCallOutputResource, FunctionToolCallResource, InputMessageResource, OutputMessage, WebSearchToolCall. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ItemResource with oneOf schemas: ComputerToolCall, ComputerToolCallOutputResource, FileSearchToolCall, FunctionToolCallOutputResource, FunctionToolCallResource, InputMessageResource, OutputMessage, WebSearchToolCall. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
