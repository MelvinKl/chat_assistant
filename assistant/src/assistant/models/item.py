# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401



from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from assistant.models.computer_tool_call import ComputerToolCall
from assistant.models.computer_tool_call_output import ComputerToolCallOutput
from assistant.models.file_search_tool_call import FileSearchToolCall
from assistant.models.function_tool_call import FunctionToolCall
from assistant.models.function_tool_call_output import FunctionToolCallOutput
from assistant.models.input_message import InputMessage
from assistant.models.output_message import OutputMessage
from assistant.models.reasoning_item import ReasoningItem
from assistant.models.web_search_tool_call import WebSearchToolCall
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

ITEM_ONE_OF_SCHEMAS = ["ComputerToolCall", "ComputerToolCallOutput", "FileSearchToolCall", "FunctionToolCall", "FunctionToolCallOutput", "InputMessage", "OutputMessage", "ReasoningItem", "WebSearchToolCall"]

class Item(BaseModel):
    """
    Content item used to generate a response. 
    """
    # data type: InputMessage
    oneof_schema_1_validator: Optional[InputMessage] = None
    # data type: OutputMessage
    oneof_schema_2_validator: Optional[OutputMessage] = None
    # data type: FileSearchToolCall
    oneof_schema_3_validator: Optional[FileSearchToolCall] = None
    # data type: ComputerToolCall
    oneof_schema_4_validator: Optional[ComputerToolCall] = None
    # data type: ComputerToolCallOutput
    oneof_schema_5_validator: Optional[ComputerToolCallOutput] = None
    # data type: WebSearchToolCall
    oneof_schema_6_validator: Optional[WebSearchToolCall] = None
    # data type: FunctionToolCall
    oneof_schema_7_validator: Optional[FunctionToolCall] = None
    # data type: FunctionToolCallOutput
    oneof_schema_8_validator: Optional[FunctionToolCallOutput] = None
    # data type: ReasoningItem
    oneof_schema_9_validator: Optional[ReasoningItem] = None
    actual_instance: Optional[Union[ComputerToolCall, ComputerToolCallOutput, FileSearchToolCall, FunctionToolCall, FunctionToolCallOutput, InputMessage, OutputMessage, ReasoningItem, WebSearchToolCall]] = None
    one_of_schemas: List[str] = Literal["ComputerToolCall", "ComputerToolCallOutput", "FileSearchToolCall", "FunctionToolCall", "FunctionToolCallOutput", "InputMessage", "OutputMessage", "ReasoningItem", "WebSearchToolCall"]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Item.model_construct()
        error_messages = []
        match = 0
        # validate data type: InputMessage
        if not isinstance(v, InputMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InputMessage`")
        else:
            match += 1
        # validate data type: OutputMessage
        if not isinstance(v, OutputMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OutputMessage`")
        else:
            match += 1
        # validate data type: FileSearchToolCall
        if not isinstance(v, FileSearchToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileSearchToolCall`")
        else:
            match += 1
        # validate data type: ComputerToolCall
        if not isinstance(v, ComputerToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComputerToolCall`")
        else:
            match += 1
        # validate data type: ComputerToolCallOutput
        if not isinstance(v, ComputerToolCallOutput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComputerToolCallOutput`")
        else:
            match += 1
        # validate data type: WebSearchToolCall
        if not isinstance(v, WebSearchToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebSearchToolCall`")
        else:
            match += 1
        # validate data type: FunctionToolCall
        if not isinstance(v, FunctionToolCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionToolCall`")
        else:
            match += 1
        # validate data type: FunctionToolCallOutput
        if not isinstance(v, FunctionToolCallOutput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionToolCallOutput`")
        else:
            match += 1
        # validate data type: ReasoningItem
        if not isinstance(v, ReasoningItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReasoningItem`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Item with oneOf schemas: ComputerToolCall, ComputerToolCallOutput, FileSearchToolCall, FunctionToolCall, FunctionToolCallOutput, InputMessage, OutputMessage, ReasoningItem, WebSearchToolCall. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Item with oneOf schemas: ComputerToolCall, ComputerToolCallOutput, FileSearchToolCall, FunctionToolCall, FunctionToolCallOutput, InputMessage, OutputMessage, ReasoningItem, WebSearchToolCall. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into InputMessage
        try:
            instance.actual_instance = InputMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OutputMessage
        try:
            instance.actual_instance = OutputMessage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileSearchToolCall
        try:
            instance.actual_instance = FileSearchToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ComputerToolCall
        try:
            instance.actual_instance = ComputerToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ComputerToolCallOutput
        try:
            instance.actual_instance = ComputerToolCallOutput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebSearchToolCall
        try:
            instance.actual_instance = WebSearchToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionToolCall
        try:
            instance.actual_instance = FunctionToolCall.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionToolCallOutput
        try:
            instance.actual_instance = FunctionToolCallOutput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReasoningItem
        try:
            instance.actual_instance = ReasoningItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Item with oneOf schemas: ComputerToolCall, ComputerToolCallOutput, FileSearchToolCall, FunctionToolCall, FunctionToolCallOutput, InputMessage, OutputMessage, ReasoningItem, WebSearchToolCall. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Item with oneOf schemas: ComputerToolCall, ComputerToolCallOutput, FileSearchToolCall, FunctionToolCall, FunctionToolCallOutput, InputMessage, OutputMessage, ReasoningItem, WebSearchToolCall. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


