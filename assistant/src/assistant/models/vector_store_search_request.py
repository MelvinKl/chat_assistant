# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Annotated

from assistant.models.file_search_tool_filters import FileSearchToolFilters
from assistant.models.vector_store_search_request_query import (
    VectorStoreSearchRequestQuery,
)
from assistant.models.vector_store_search_request_ranking_options import (
    VectorStoreSearchRequestRankingOptions,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class VectorStoreSearchRequest(BaseModel):
    """
    VectorStoreSearchRequest
    """  # noqa: E501

    query: VectorStoreSearchRequestQuery
    rewrite_query: Optional[StrictBool] = Field(
        default=False, description="Whether to rewrite the natural language query for vector search."
    )
    max_num_results: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = Field(
        default=10,
        description="The maximum number of results to return. This number should be between 1 and 50 inclusive.",
    )
    filters: Optional[FileSearchToolFilters] = None
    ranking_options: Optional[VectorStoreSearchRequestRankingOptions] = None
    __properties: ClassVar[List[str]] = ["query", "rewrite_query", "max_num_results", "filters", "ranking_options"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VectorStoreSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict["query"] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict["filters"] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranking_options
        if self.ranking_options:
            _dict["ranking_options"] = self.ranking_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VectorStoreSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "query": (
                    VectorStoreSearchRequestQuery.from_dict(obj.get("query")) if obj.get("query") is not None else None
                ),
                "rewrite_query": obj.get("rewrite_query") if obj.get("rewrite_query") is not None else False,
                "max_num_results": obj.get("max_num_results") if obj.get("max_num_results") is not None else 10,
                "filters": (
                    FileSearchToolFilters.from_dict(obj.get("filters")) if obj.get("filters") is not None else None
                ),
                "ranking_options": (
                    VectorStoreSearchRequestRankingOptions.from_dict(obj.get("ranking_options"))
                    if obj.get("ranking_options") is not None
                    else None
                ),
            }
        )
        return _obj
