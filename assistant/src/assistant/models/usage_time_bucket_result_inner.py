# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401


from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from assistant.models.costs_result import CostsResult
from assistant.models.usage_audio_speeches_result import UsageAudioSpeechesResult
from assistant.models.usage_audio_transcriptions_result import UsageAudioTranscriptionsResult
from assistant.models.usage_code_interpreter_sessions_result import UsageCodeInterpreterSessionsResult
from assistant.models.usage_completions_result import UsageCompletionsResult
from assistant.models.usage_embeddings_result import UsageEmbeddingsResult
from assistant.models.usage_images_result import UsageImagesResult
from assistant.models.usage_moderations_result import UsageModerationsResult
from assistant.models.usage_vector_stores_result import UsageVectorStoresResult
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

USAGETIMEBUCKETRESULTINNER_ONE_OF_SCHEMAS = [
    "CostsResult",
    "UsageAudioSpeechesResult",
    "UsageAudioTranscriptionsResult",
    "UsageCodeInterpreterSessionsResult",
    "UsageCompletionsResult",
    "UsageEmbeddingsResult",
    "UsageImagesResult",
    "UsageModerationsResult",
    "UsageVectorStoresResult",
]


class UsageTimeBucketResultInner(BaseModel):
    """
    UsageTimeBucketResultInner
    """

    # data type: UsageCompletionsResult
    oneof_schema_1_validator: Optional[UsageCompletionsResult] = None
    # data type: UsageEmbeddingsResult
    oneof_schema_2_validator: Optional[UsageEmbeddingsResult] = None
    # data type: UsageModerationsResult
    oneof_schema_3_validator: Optional[UsageModerationsResult] = None
    # data type: UsageImagesResult
    oneof_schema_4_validator: Optional[UsageImagesResult] = None
    # data type: UsageAudioSpeechesResult
    oneof_schema_5_validator: Optional[UsageAudioSpeechesResult] = None
    # data type: UsageAudioTranscriptionsResult
    oneof_schema_6_validator: Optional[UsageAudioTranscriptionsResult] = None
    # data type: UsageVectorStoresResult
    oneof_schema_7_validator: Optional[UsageVectorStoresResult] = None
    # data type: UsageCodeInterpreterSessionsResult
    oneof_schema_8_validator: Optional[UsageCodeInterpreterSessionsResult] = None
    # data type: CostsResult
    oneof_schema_9_validator: Optional[CostsResult] = None
    actual_instance: Optional[
        Union[
            CostsResult,
            UsageAudioSpeechesResult,
            UsageAudioTranscriptionsResult,
            UsageCodeInterpreterSessionsResult,
            UsageCompletionsResult,
            UsageEmbeddingsResult,
            UsageImagesResult,
            UsageModerationsResult,
            UsageVectorStoresResult,
        ]
    ] = None
    one_of_schemas: List[str] = Literal[
        "CostsResult",
        "UsageAudioSpeechesResult",
        "UsageAudioTranscriptionsResult",
        "UsageCodeInterpreterSessionsResult",
        "UsageCompletionsResult",
        "UsageEmbeddingsResult",
        "UsageImagesResult",
        "UsageModerationsResult",
        "UsageVectorStoresResult",
    ]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = UsageTimeBucketResultInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: UsageCompletionsResult
        if not isinstance(v, UsageCompletionsResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageCompletionsResult`")
        else:
            match += 1
        # validate data type: UsageEmbeddingsResult
        if not isinstance(v, UsageEmbeddingsResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageEmbeddingsResult`")
        else:
            match += 1
        # validate data type: UsageModerationsResult
        if not isinstance(v, UsageModerationsResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageModerationsResult`")
        else:
            match += 1
        # validate data type: UsageImagesResult
        if not isinstance(v, UsageImagesResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageImagesResult`")
        else:
            match += 1
        # validate data type: UsageAudioSpeechesResult
        if not isinstance(v, UsageAudioSpeechesResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageAudioSpeechesResult`")
        else:
            match += 1
        # validate data type: UsageAudioTranscriptionsResult
        if not isinstance(v, UsageAudioTranscriptionsResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageAudioTranscriptionsResult`")
        else:
            match += 1
        # validate data type: UsageVectorStoresResult
        if not isinstance(v, UsageVectorStoresResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageVectorStoresResult`")
        else:
            match += 1
        # validate data type: UsageCodeInterpreterSessionsResult
        if not isinstance(v, UsageCodeInterpreterSessionsResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageCodeInterpreterSessionsResult`")
        else:
            match += 1
        # validate data type: CostsResult
        if not isinstance(v, CostsResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CostsResult`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in UsageTimeBucketResultInner with oneOf schemas: CostsResult, UsageAudioSpeechesResult, UsageAudioTranscriptionsResult, UsageCodeInterpreterSessionsResult, UsageCompletionsResult, UsageEmbeddingsResult, UsageImagesResult, UsageModerationsResult, UsageVectorStoresResult. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in UsageTimeBucketResultInner with oneOf schemas: CostsResult, UsageAudioSpeechesResult, UsageAudioTranscriptionsResult, UsageCodeInterpreterSessionsResult, UsageCompletionsResult, UsageEmbeddingsResult, UsageImagesResult, UsageModerationsResult, UsageVectorStoresResult. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into UsageCompletionsResult
        try:
            instance.actual_instance = UsageCompletionsResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageEmbeddingsResult
        try:
            instance.actual_instance = UsageEmbeddingsResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageModerationsResult
        try:
            instance.actual_instance = UsageModerationsResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageImagesResult
        try:
            instance.actual_instance = UsageImagesResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageAudioSpeechesResult
        try:
            instance.actual_instance = UsageAudioSpeechesResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageAudioTranscriptionsResult
        try:
            instance.actual_instance = UsageAudioTranscriptionsResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageVectorStoresResult
        try:
            instance.actual_instance = UsageVectorStoresResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageCodeInterpreterSessionsResult
        try:
            instance.actual_instance = UsageCodeInterpreterSessionsResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CostsResult
        try:
            instance.actual_instance = CostsResult.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into UsageTimeBucketResultInner with oneOf schemas: CostsResult, UsageAudioSpeechesResult, UsageAudioTranscriptionsResult, UsageCodeInterpreterSessionsResult, UsageCompletionsResult, UsageEmbeddingsResult, UsageImagesResult, UsageModerationsResult, UsageVectorStoresResult. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into UsageTimeBucketResultInner with oneOf schemas: CostsResult, UsageAudioSpeechesResult, UsageAudioTranscriptionsResult, UsageCodeInterpreterSessionsResult, UsageCompletionsResult, UsageEmbeddingsResult, UsageImagesResult, UsageModerationsResult, UsageVectorStoresResult. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
