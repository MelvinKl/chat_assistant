# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectRateLimit(BaseModel):
    """
    Represents a project rate limit config.
    """ # noqa: E501
    object: StrictStr = Field(description="The object type, which is always `project.rate_limit`")
    id: StrictStr = Field(description="The identifier, which can be referenced in API endpoints.")
    model: StrictStr = Field(description="The model this rate limit applies to.")
    max_requests_per_1_minute: StrictInt = Field(description="The maximum requests per minute.")
    max_tokens_per_1_minute: StrictInt = Field(description="The maximum tokens per minute.")
    max_images_per_1_minute: Optional[StrictInt] = Field(default=None, description="The maximum images per minute. Only present for relevant models.")
    max_audio_megabytes_per_1_minute: Optional[StrictInt] = Field(default=None, description="The maximum audio megabytes per minute. Only present for relevant models.")
    max_requests_per_1_day: Optional[StrictInt] = Field(default=None, description="The maximum requests per day. Only present for relevant models.")
    batch_1_day_max_input_tokens: Optional[StrictInt] = Field(default=None, description="The maximum batch input tokens per day. Only present for relevant models.")
    __properties: ClassVar[List[str]] = ["object", "id", "model", "max_requests_per_1_minute", "max_tokens_per_1_minute", "max_images_per_1_minute", "max_audio_megabytes_per_1_minute", "max_requests_per_1_day", "batch_1_day_max_input_tokens"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('project.rate_limit',):
            raise ValueError("must be one of enum values ('project.rate_limit')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectRateLimit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectRateLimit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "model": obj.get("model"),
            "max_requests_per_1_minute": obj.get("max_requests_per_1_minute"),
            "max_tokens_per_1_minute": obj.get("max_tokens_per_1_minute"),
            "max_images_per_1_minute": obj.get("max_images_per_1_minute"),
            "max_audio_megabytes_per_1_minute": obj.get("max_audio_megabytes_per_1_minute"),
            "max_requests_per_1_day": obj.get("max_requests_per_1_day"),
            "batch_1_day_max_input_tokens": obj.get("batch_1_day_max_input_tokens")
        })
        return _obj


