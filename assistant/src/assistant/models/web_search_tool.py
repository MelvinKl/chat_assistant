# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from assistant.models.web_search_context_size import WebSearchContextSize
from assistant.models.web_search_tool_user_location import WebSearchToolUserLocation
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WebSearchTool(BaseModel):
    """
    This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](/docs/guides/tools-web-search). 
    """ # noqa: E501
    type: StrictStr = Field(description="The type of the web search tool. One of: - `web_search_preview` - `web_search_preview_2025_03_11` ")
    user_location: Optional[WebSearchToolUserLocation] = None
    search_context_size: Optional[WebSearchContextSize] = WebSearchContextSize.MEDIUM
    __properties: ClassVar[List[str]] = ["type", "user_location", "search_context_size"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('web_search_preview', 'web_search_preview_2025_03_11',):
            raise ValueError("must be one of enum values ('web_search_preview', 'web_search_preview_2025_03_11')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WebSearchTool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_location
        if self.user_location:
            _dict['user_location'] = self.user_location.to_dict()
        # set to None if user_location (nullable) is None
        # and model_fields_set contains the field
        if self.user_location is None and "user_location" in self.model_fields_set:
            _dict['user_location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WebSearchTool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "user_location": WebSearchToolUserLocation.from_dict(obj.get("user_location")) if obj.get("user_location") is not None else None,
            "search_context_size": obj.get("search_context_size") if obj.get("search_context_size") is not None else WebSearchContextSize.MEDIUM
        })
        return _obj


