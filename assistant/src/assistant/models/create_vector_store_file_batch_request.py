# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated

from assistant.models.chunking_strategy_request_param import (
    ChunkingStrategyRequestParam,
)
from assistant.models.vector_store_file_attributes_value import (
    VectorStoreFileAttributesValue,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CreateVectorStoreFileBatchRequest(BaseModel):
    """
    CreateVectorStoreFileBatchRequest
    """  # noqa: E501

    file_ids: Annotated[List[StrictStr], Field(min_length=1, max_length=500)] = Field(
        description="A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files."
    )
    chunking_strategy: Optional[ChunkingStrategyRequestParam] = None
    attributes: Optional[Dict[str, VectorStoreFileAttributesValue]] = Field(
        default=None,
        description="Set of 16 key-value pairs that can be attached to an object. This can be  useful for storing additional information about the object in a structured  format, and querying for objects via API or the dashboard. Keys are strings  with a maximum length of 64 characters. Values are strings with a maximum  length of 512 characters, booleans, or numbers. ",
    )
    __properties: ClassVar[List[str]] = ["file_ids", "chunking_strategy", "attributes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateVectorStoreFileBatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chunking_strategy
        if self.chunking_strategy:
            _dict["chunking_strategy"] = self.chunking_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key in self.attributes:
                if self.attributes[_key]:
                    _field_dict[_key] = self.attributes[_key].to_dict()
            _dict["attributes"] = _field_dict
        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict["attributes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateVectorStoreFileBatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "file_ids": obj.get("file_ids"),
                "chunking_strategy": (
                    ChunkingStrategyRequestParam.from_dict(obj.get("chunking_strategy"))
                    if obj.get("chunking_strategy") is not None
                    else None
                ),
                "attributes": (
                    dict((_k, VectorStoreFileAttributesValue.from_dict(_v)) for _k, _v in obj.get("attributes").items())
                    if obj.get("attributes") is not None
                    else None
                ),
            }
        )
        return _obj
