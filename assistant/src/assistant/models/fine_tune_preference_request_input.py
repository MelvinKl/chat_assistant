# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from assistant.models.fine_tune_preference_request_input_input import FineTunePreferenceRequestInputInput
from assistant.models.fine_tune_preference_request_input_preferred_completion_inner import (
    FineTunePreferenceRequestInputPreferredCompletionInner,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class FineTunePreferenceRequestInput(BaseModel):
    """
    The per-line training example of a fine-tuning input file for chat models using the dpo method.
    """  # noqa: E501

    input: Optional[FineTunePreferenceRequestInputInput] = None
    preferred_completion: Optional[
        Annotated[List[FineTunePreferenceRequestInputPreferredCompletionInner], Field(max_length=1)]
    ] = Field(default=None, description="The preferred completion message for the output.")
    non_preferred_completion: Optional[
        Annotated[List[FineTunePreferenceRequestInputPreferredCompletionInner], Field(max_length=1)]
    ] = Field(default=None, description="The non-preferred completion message for the output.")
    __properties: ClassVar[List[str]] = ["input", "preferred_completion", "non_preferred_completion"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FineTunePreferenceRequestInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict["input"] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in preferred_completion (list)
        _items = []
        if self.preferred_completion:
            for _item in self.preferred_completion:
                if _item:
                    _items.append(_item.to_dict())
            _dict["preferred_completion"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_preferred_completion (list)
        _items = []
        if self.non_preferred_completion:
            for _item in self.non_preferred_completion:
                if _item:
                    _items.append(_item.to_dict())
            _dict["non_preferred_completion"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FineTunePreferenceRequestInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "input": (
                    FineTunePreferenceRequestInputInput.from_dict(obj.get("input"))
                    if obj.get("input") is not None
                    else None
                ),
                "preferred_completion": (
                    [
                        FineTunePreferenceRequestInputPreferredCompletionInner.from_dict(_item)
                        for _item in obj.get("preferred_completion")
                    ]
                    if obj.get("preferred_completion") is not None
                    else None
                ),
                "non_preferred_completion": (
                    [
                        FineTunePreferenceRequestInputPreferredCompletionInner.from_dict(_item)
                        for _item in obj.get("non_preferred_completion")
                    ]
                    if obj.get("non_preferred_completion") is not None
                    else None
                ),
            }
        )
        return _obj
