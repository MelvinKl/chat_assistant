# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated

from assistant.models.create_response_all_of_input import CreateResponseAllOfInput
from assistant.models.includable import Includable
from assistant.models.model_ids_responses import ModelIdsResponses
from assistant.models.reasoning import Reasoning
from assistant.models.response_properties_text import ResponsePropertiesText
from assistant.models.response_properties_tool_choice import (
    ResponsePropertiesToolChoice,
)
from assistant.models.tool import Tool

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CreateResponse(BaseModel):
    """
    CreateResponse
    """  # noqa: E501

    metadata: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. ",
    )
    temperature: Optional[
        Union[Annotated[float, Field(le=2, strict=True, ge=0)], Annotated[int, Field(le=2, strict=True, ge=0)]]
    ] = Field(
        default=1,
        description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both. ",
    )
    top_p: Optional[
        Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]
    ] = Field(
        default=1,
        description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both. ",
    )
    user: Optional[StrictStr] = Field(
        default=None,
        description="A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). ",
    )
    previous_response_id: Optional[StrictStr] = Field(
        default=None,
        description="The unique ID of the previous response to the model. Use this to create multi-turn conversations. Learn more about  [conversation state](/docs/guides/conversation-state). ",
    )
    model: ModelIdsResponses
    reasoning: Optional[Reasoning] = None
    max_output_tokens: Optional[StrictInt] = Field(
        default=None,
        description="An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning). ",
    )
    instructions: Optional[StrictStr] = Field(
        default=None,
        description="Inserts a system (or developer) message as the first item in the model's context.  When using along with `previous_response_id`, the instructions from a previous response will be not be carried over to the next response. This makes it simple to swap out system (or developer) messages in new responses. ",
    )
    text: Optional[ResponsePropertiesText] = None
    tools: Optional[List[Tool]] = Field(
        default=None,
        description="An array of tools the model may call while generating a response. You  can specify which tool to use by setting the `tool_choice` parameter.  The two categories of tools you can provide the model are:  - **Built-in tools**: Tools that are provided by OpenAI that extend the   model's capabilities, like [web search](/docs/guides/tools-web-search)   or [file search](/docs/guides/tools-file-search). Learn more about   [built-in tools](/docs/guides/tools). - **Function calls (custom tools)**: Functions that are defined by you,   enabling the model to call your own code. Learn more about   [function calling](/docs/guides/function-calling). ",
    )
    tool_choice: Optional[ResponsePropertiesToolChoice] = None
    truncation: Optional[StrictStr] = Field(
        default="disabled",
        description="The truncation strategy to use for the model response. - `auto`: If the context of this response and previous ones exceeds   the model's context window size, the model will truncate the    response to fit the context window by dropping input items in the   middle of the conversation.  - `disabled` (default): If a model response will exceed the context window    size for a model, the request will fail with a 400 error. ",
    )
    input: CreateResponseAllOfInput
    include: Optional[List[Includable]] = Field(
        default=None,
        description="Specify additional output data to include in the model response. Currently supported values are: - `file_search_call.results`: Include the search results of   the file search tool call. - `message.input_image.image_url`: Include image urls from the input message. - `computer_call_output.output.image_url`: Include image urls from the computer call output. ",
    )
    parallel_tool_calls: Optional[StrictBool] = Field(
        default=True, description="Whether to allow the model to run tool calls in parallel. "
    )
    store: Optional[StrictBool] = Field(
        default=True, description="Whether to store the generated model response for later retrieval via API. "
    )
    stream: Optional[StrictBool] = Field(
        default=False,
        description="If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). See the [Streaming section below](/docs/api-reference/responses-streaming) for more information. ",
    )
    __properties: ClassVar[List[str]] = [
        "metadata",
        "temperature",
        "top_p",
        "user",
        "previous_response_id",
        "model",
        "reasoning",
        "max_output_tokens",
        "instructions",
        "text",
        "tools",
        "tool_choice",
        "truncation",
        "input",
        "include",
        "parallel_tool_calls",
        "store",
        "stream",
    ]

    @field_validator("truncation")
    def truncation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "auto",
            "disabled",
        ):
            raise ValueError("must be one of enum values ('auto', 'disabled')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reasoning
        if self.reasoning:
            _dict["reasoning"] = self.reasoning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict["text"] = self.text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tools"] = _items
        # override the default output from pydantic by calling `to_dict()` of tool_choice
        if self.tool_choice:
            _dict["tool_choice"] = self.tool_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict["input"] = self.input.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict["metadata"] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict["temperature"] = None

        # set to None if top_p (nullable) is None
        # and model_fields_set contains the field
        if self.top_p is None and "top_p" in self.model_fields_set:
            _dict["top_p"] = None

        # set to None if previous_response_id (nullable) is None
        # and model_fields_set contains the field
        if self.previous_response_id is None and "previous_response_id" in self.model_fields_set:
            _dict["previous_response_id"] = None

        # set to None if max_output_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_output_tokens is None and "max_output_tokens" in self.model_fields_set:
            _dict["max_output_tokens"] = None

        # set to None if instructions (nullable) is None
        # and model_fields_set contains the field
        if self.instructions is None and "instructions" in self.model_fields_set:
            _dict["instructions"] = None

        # set to None if truncation (nullable) is None
        # and model_fields_set contains the field
        if self.truncation is None and "truncation" in self.model_fields_set:
            _dict["truncation"] = None

        # set to None if include (nullable) is None
        # and model_fields_set contains the field
        if self.include is None and "include" in self.model_fields_set:
            _dict["include"] = None

        # set to None if parallel_tool_calls (nullable) is None
        # and model_fields_set contains the field
        if self.parallel_tool_calls is None and "parallel_tool_calls" in self.model_fields_set:
            _dict["parallel_tool_calls"] = None

        # set to None if store (nullable) is None
        # and model_fields_set contains the field
        if self.store is None and "store" in self.model_fields_set:
            _dict["store"] = None

        # set to None if stream (nullable) is None
        # and model_fields_set contains the field
        if self.stream is None and "stream" in self.model_fields_set:
            _dict["stream"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "metadata": obj.get("metadata"),
                "temperature": obj.get("temperature") if obj.get("temperature") is not None else 1,
                "top_p": obj.get("top_p") if obj.get("top_p") is not None else 1,
                "user": obj.get("user"),
                "previous_response_id": obj.get("previous_response_id"),
                "model": ModelIdsResponses.from_dict(obj.get("model")) if obj.get("model") is not None else None,
                "reasoning": Reasoning.from_dict(obj.get("reasoning")) if obj.get("reasoning") is not None else None,
                "max_output_tokens": obj.get("max_output_tokens"),
                "instructions": obj.get("instructions"),
                "text": ResponsePropertiesText.from_dict(obj.get("text")) if obj.get("text") is not None else None,
                "tools": (
                    [Tool.from_dict(_item) for _item in obj.get("tools")] if obj.get("tools") is not None else None
                ),
                "tool_choice": (
                    ResponsePropertiesToolChoice.from_dict(obj.get("tool_choice"))
                    if obj.get("tool_choice") is not None
                    else None
                ),
                "truncation": obj.get("truncation") if obj.get("truncation") is not None else "disabled",
                "input": CreateResponseAllOfInput.from_dict(obj.get("input")) if obj.get("input") is not None else None,
                "include": obj.get("include"),
                "parallel_tool_calls": (
                    obj.get("parallel_tool_calls") if obj.get("parallel_tool_calls") is not None else True
                ),
                "store": obj.get("store") if obj.get("store") is not None else True,
                "stream": obj.get("stream") if obj.get("stream") is not None else False,
            }
        )
        return _obj
