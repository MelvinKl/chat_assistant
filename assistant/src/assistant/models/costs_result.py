# coding: utf-8

"""
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator

from assistant.models.costs_result_amount import CostsResultAmount

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CostsResult(BaseModel):
    """
    The aggregated costs details of the specific time bucket.
    """  # noqa: E501

    object: StrictStr
    amount: Optional[CostsResultAmount] = None
    line_item: Optional[StrictStr] = Field(
        default=None,
        description="When `group_by=line_item`, this field provides the line item of the grouped costs result.",
    )
    project_id: Optional[StrictStr] = Field(
        default=None,
        description="When `group_by=project_id`, this field provides the project ID of the grouped costs result.",
    )
    __properties: ClassVar[List[str]] = ["object", "amount", "line_item", "project_id"]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("organization.costs.result",):
            raise ValueError("must be one of enum values ('organization.costs.result')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CostsResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict["amount"] = self.amount.to_dict()
        # set to None if line_item (nullable) is None
        # and model_fields_set contains the field
        if self.line_item is None and "line_item" in self.model_fields_set:
            _dict["line_item"] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict["project_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CostsResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "amount": CostsResultAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
                "line_item": obj.get("line_item"),
                "project_id": obj.get("project_id"),
            }
        )
        return _obj
