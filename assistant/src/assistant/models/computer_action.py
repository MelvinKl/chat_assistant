# coding: utf-8

"""
    OpenAI API

    The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

    The version of the OpenAPI document: 2.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401



from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from assistant.models.click import Click
from assistant.models.double_click import DoubleClick
from assistant.models.drag import Drag
from assistant.models.key_press import KeyPress
from assistant.models.move import Move
from assistant.models.screenshot import Screenshot
from assistant.models.scroll import Scroll
from assistant.models.type import Type
from assistant.models.wait import Wait
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

COMPUTERACTION_ONE_OF_SCHEMAS = ["Click", "DoubleClick", "Drag", "KeyPress", "Move", "Screenshot", "Scroll", "Type", "Wait"]

class ComputerAction(BaseModel):
    """
    ComputerAction
    """
    # data type: Click
    oneof_schema_1_validator: Optional[Click] = None
    # data type: DoubleClick
    oneof_schema_2_validator: Optional[DoubleClick] = None
    # data type: Drag
    oneof_schema_3_validator: Optional[Drag] = None
    # data type: KeyPress
    oneof_schema_4_validator: Optional[KeyPress] = None
    # data type: Move
    oneof_schema_5_validator: Optional[Move] = None
    # data type: Screenshot
    oneof_schema_6_validator: Optional[Screenshot] = None
    # data type: Scroll
    oneof_schema_7_validator: Optional[Scroll] = None
    # data type: Type
    oneof_schema_8_validator: Optional[Type] = None
    # data type: Wait
    oneof_schema_9_validator: Optional[Wait] = None
    actual_instance: Optional[Union[Click, DoubleClick, Drag, KeyPress, Move, Screenshot, Scroll, Type, Wait]] = None
    one_of_schemas: List[str] = Literal["Click", "DoubleClick", "Drag", "KeyPress", "Move", "Screenshot", "Scroll", "Type", "Wait"]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ComputerAction.model_construct()
        error_messages = []
        match = 0
        # validate data type: Click
        if not isinstance(v, Click):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Click`")
        else:
            match += 1
        # validate data type: DoubleClick
        if not isinstance(v, DoubleClick):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DoubleClick`")
        else:
            match += 1
        # validate data type: Drag
        if not isinstance(v, Drag):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Drag`")
        else:
            match += 1
        # validate data type: KeyPress
        if not isinstance(v, KeyPress):
            error_messages.append(f"Error! Input type `{type(v)}` is not `KeyPress`")
        else:
            match += 1
        # validate data type: Move
        if not isinstance(v, Move):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Move`")
        else:
            match += 1
        # validate data type: Screenshot
        if not isinstance(v, Screenshot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Screenshot`")
        else:
            match += 1
        # validate data type: Scroll
        if not isinstance(v, Scroll):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Scroll`")
        else:
            match += 1
        # validate data type: Type
        if not isinstance(v, Type):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Type`")
        else:
            match += 1
        # validate data type: Wait
        if not isinstance(v, Wait):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Wait`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ComputerAction with oneOf schemas: Click, DoubleClick, Drag, KeyPress, Move, Screenshot, Scroll, Type, Wait. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ComputerAction with oneOf schemas: Click, DoubleClick, Drag, KeyPress, Move, Screenshot, Scroll, Type, Wait. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Click
        try:
            instance.actual_instance = Click.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DoubleClick
        try:
            instance.actual_instance = DoubleClick.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Drag
        try:
            instance.actual_instance = Drag.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into KeyPress
        try:
            instance.actual_instance = KeyPress.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Move
        try:
            instance.actual_instance = Move.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Screenshot
        try:
            instance.actual_instance = Screenshot.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Scroll
        try:
            instance.actual_instance = Scroll.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Type
        try:
            instance.actual_instance = Type.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Wait
        try:
            instance.actual_instance = Wait.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ComputerAction with oneOf schemas: Click, DoubleClick, Drag, KeyPress, Move, Screenshot, Scroll, Type, Wait. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ComputerAction with oneOf schemas: Click, DoubleClick, Drag, KeyPress, Move, Screenshot, Scroll, Type, Wait. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


