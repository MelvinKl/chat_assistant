"""Module for the GraphState class."""

from typing_extensions import TypedDict


class GraphState(TypedDict):
    """Dict for holding the current state of the ChatGraph."""

    question: str | None
    history: list[tuple[str, str]]
    raw_answer: str | None
    processed_answer: str | None
    question_language: str | None
    additional_info: dict

    @classmethod
    def create(
        cls,
        history: list[tuple[str, str]],
        question: str | None = None,
        raw_answer: str | None = None,
        processed_answer: str | None = None,
        question_language: str | None = None,
        additional_info: dict | None = None,
    ) -> "GraphState":
        """
        Create an instance of the GraphState

        Parameters
        ----------
        history: list[tuple[str, str]]
            Chat history. Contains role and message
        question: str | None = None
            The question the user asked. Defaults to None
        raw_answer: str | None = None
            The not rephrased answer generated by the LLM. Defaults to None
        processed_answer: str | None = None
            The processes answer that will be returned to the user. Defaults to None
        question_language: str | None = None
            The language in which the question was asked. Will be used to generate an answer in the same language.
            Defaults to None
        additional_info: dict | None = None
            Dictionary with additional information that can be used in the answer generation process. Defaults to None

        Returns
        -------
        GraphState
            The created GraphState instance
        """
        return GraphState(
            question=question,
            history=history,
            raw_answer=raw_answer,
            processed_answer=processed_answer,
            question_language=question_language,
            additional_info=additional_info or {},
        )
